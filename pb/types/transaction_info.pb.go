// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: transaction_info.proto

package types

import (
	bytes "bytes"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// `TransactionInfo` is the object we store in the transaction accumulator. It
// consists of the transaction as well as the execution result of this
// transaction. This are later returned to the client so that a client can
// validate the tree
type TransactionInfo struct {
	// Hash of the signed transaction that is stored
	SignedTransactionHash []byte `protobuf:"bytes,1,opt,name=signed_transaction_hash,json=signedTransactionHash,proto3" json:"signed_transaction_hash,omitempty"`
	// The root hash of Sparse Merkle Tree describing the world state at the end
	// of this transaction
	StateRootHash []byte `protobuf:"bytes,2,opt,name=state_root_hash,json=stateRootHash,proto3" json:"state_root_hash,omitempty"`
	// The root hash of Merkle Accumulator storing all events emitted during this
	// transaction.
	EventRootHash []byte `protobuf:"bytes,3,opt,name=event_root_hash,json=eventRootHash,proto3" json:"event_root_hash,omitempty"`
	// The amount of gas used by this transaction.
	GasUsed uint64 `protobuf:"varint,4,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
}

func (m *TransactionInfo) Reset()      { *m = TransactionInfo{} }
func (*TransactionInfo) ProtoMessage() {}
func (*TransactionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_19ed5f4c459e84f4, []int{0}
}
func (m *TransactionInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionInfo.Merge(m, src)
}
func (m *TransactionInfo) XXX_Size() int {
	return m.Size()
}
func (m *TransactionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionInfo proto.InternalMessageInfo

func (m *TransactionInfo) GetSignedTransactionHash() []byte {
	if m != nil {
		return m.SignedTransactionHash
	}
	return nil
}

func (m *TransactionInfo) GetStateRootHash() []byte {
	if m != nil {
		return m.StateRootHash
	}
	return nil
}

func (m *TransactionInfo) GetEventRootHash() []byte {
	if m != nil {
		return m.EventRootHash
	}
	return nil
}

func (m *TransactionInfo) GetGasUsed() uint64 {
	if m != nil {
		return m.GasUsed
	}
	return 0
}

func init() {
	proto.RegisterType((*TransactionInfo)(nil), "types.TransactionInfo")
}

func init() { proto.RegisterFile("transaction_info.proto", fileDescriptor_19ed5f4c459e84f4) }

var fileDescriptor_19ed5f4c459e84f4 = []byte{
	// 231 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2b, 0x29, 0x4a, 0xcc,
	0x2b, 0x4e, 0x4c, 0x2e, 0xc9, 0xcc, 0xcf, 0x8b, 0xcf, 0xcc, 0x4b, 0xcb, 0xd7, 0x2b, 0x28, 0xca,
	0x2f, 0xc9, 0x17, 0x62, 0x2d, 0xa9, 0x2c, 0x48, 0x2d, 0x56, 0xda, 0xc2, 0xc8, 0xc5, 0x1f, 0x82,
	0x50, 0xe1, 0x99, 0x97, 0x96, 0x2f, 0x64, 0xc6, 0x25, 0x5e, 0x9c, 0x99, 0x9e, 0x97, 0x9a, 0x12,
	0x8f, 0xac, 0x37, 0x23, 0xb1, 0x38, 0x43, 0x82, 0x51, 0x81, 0x51, 0x83, 0x27, 0x48, 0x14, 0x22,
	0x8d, 0xa4, 0xcf, 0x23, 0xb1, 0x38, 0x43, 0x48, 0x8d, 0x8b, 0xbf, 0xb8, 0x24, 0xb1, 0x24, 0x35,
	0xbe, 0x28, 0x3f, 0xbf, 0x04, 0xa2, 0x9e, 0x09, 0xac, 0x9e, 0x17, 0x2c, 0x1c, 0x94, 0x9f, 0x5f,
	0x02, 0x53, 0x97, 0x5a, 0x96, 0x9a, 0x57, 0x82, 0xa4, 0x8e, 0x19, 0xa2, 0x0e, 0x2c, 0x0c, 0x57,
	0x27, 0xc9, 0xc5, 0x91, 0x9e, 0x58, 0x1c, 0x5f, 0x5a, 0x9c, 0x9a, 0x22, 0xc1, 0xa2, 0xc0, 0xa8,
	0xc1, 0x12, 0xc4, 0x9e, 0x9e, 0x58, 0x1c, 0x5a, 0x9c, 0x9a, 0xe2, 0x64, 0x72, 0xe1, 0xa1, 0x1c,
	0xc3, 0x8d, 0x87, 0x72, 0x0c, 0x1f, 0x1e, 0xca, 0x31, 0x36, 0x3c, 0x92, 0x63, 0x5c, 0xf1, 0x48,
	0x8e, 0xf1, 0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x7c, 0xf1,
	0x48, 0x8e, 0xe1, 0xc3, 0x23, 0x39, 0xc6, 0x09, 0x8f, 0xe5, 0x18, 0x2e, 0x3c, 0x96, 0x63, 0xb8,
	0xf1, 0x58, 0x8e, 0x21, 0x89, 0x0d, 0xec, 0x75, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb6,
	0xad, 0x41, 0xe9, 0x14, 0x01, 0x00, 0x00,
}

func (this *TransactionInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TransactionInfo)
	if !ok {
		that2, ok := that.(TransactionInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.SignedTransactionHash, that1.SignedTransactionHash) {
		return false
	}
	if !bytes.Equal(this.StateRootHash, that1.StateRootHash) {
		return false
	}
	if !bytes.Equal(this.EventRootHash, that1.EventRootHash) {
		return false
	}
	if this.GasUsed != that1.GasUsed {
		return false
	}
	return true
}
func (this *TransactionInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&types.TransactionInfo{")
	s = append(s, "SignedTransactionHash: "+fmt.Sprintf("%#v", this.SignedTransactionHash)+",\n")
	s = append(s, "StateRootHash: "+fmt.Sprintf("%#v", this.StateRootHash)+",\n")
	s = append(s, "EventRootHash: "+fmt.Sprintf("%#v", this.EventRootHash)+",\n")
	s = append(s, "GasUsed: "+fmt.Sprintf("%#v", this.GasUsed)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTransactionInfo(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *TransactionInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SignedTransactionHash) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTransactionInfo(dAtA, i, uint64(len(m.SignedTransactionHash)))
		i += copy(dAtA[i:], m.SignedTransactionHash)
	}
	if len(m.StateRootHash) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTransactionInfo(dAtA, i, uint64(len(m.StateRootHash)))
		i += copy(dAtA[i:], m.StateRootHash)
	}
	if len(m.EventRootHash) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTransactionInfo(dAtA, i, uint64(len(m.EventRootHash)))
		i += copy(dAtA[i:], m.EventRootHash)
	}
	if m.GasUsed != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTransactionInfo(dAtA, i, uint64(m.GasUsed))
	}
	return i, nil
}

func encodeVarintTransactionInfo(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TransactionInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SignedTransactionHash)
	if l > 0 {
		n += 1 + l + sovTransactionInfo(uint64(l))
	}
	l = len(m.StateRootHash)
	if l > 0 {
		n += 1 + l + sovTransactionInfo(uint64(l))
	}
	l = len(m.EventRootHash)
	if l > 0 {
		n += 1 + l + sovTransactionInfo(uint64(l))
	}
	if m.GasUsed != 0 {
		n += 1 + sovTransactionInfo(uint64(m.GasUsed))
	}
	return n
}

func sovTransactionInfo(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTransactionInfo(x uint64) (n int) {
	return sovTransactionInfo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *TransactionInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TransactionInfo{`,
		`SignedTransactionHash:` + fmt.Sprintf("%v", this.SignedTransactionHash) + `,`,
		`StateRootHash:` + fmt.Sprintf("%v", this.StateRootHash) + `,`,
		`EventRootHash:` + fmt.Sprintf("%v", this.EventRootHash) + `,`,
		`GasUsed:` + fmt.Sprintf("%v", this.GasUsed) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTransactionInfo(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *TransactionInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransactionInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransactionInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransactionInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignedTransactionHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactionInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTransactionInfo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTransactionInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignedTransactionHash = append(m.SignedTransactionHash[:0], dAtA[iNdEx:postIndex]...)
			if m.SignedTransactionHash == nil {
				m.SignedTransactionHash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateRootHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactionInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTransactionInfo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTransactionInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateRootHash = append(m.StateRootHash[:0], dAtA[iNdEx:postIndex]...)
			if m.StateRootHash == nil {
				m.StateRootHash = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventRootHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactionInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTransactionInfo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTransactionInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventRootHash = append(m.EventRootHash[:0], dAtA[iNdEx:postIndex]...)
			if m.EventRootHash == nil {
				m.EventRootHash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasUsed", wireType)
			}
			m.GasUsed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactionInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasUsed |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTransactionInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransactionInfo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTransactionInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTransactionInfo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTransactionInfo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTransactionInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTransactionInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTransactionInfo
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthTransactionInfo
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTransactionInfo
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTransactionInfo(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthTransactionInfo
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTransactionInfo = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTransactionInfo   = fmt.Errorf("proto: integer overflow")
)
