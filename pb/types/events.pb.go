// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: events.proto

package types

import (
	bytes "bytes"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// An event emitted from a smart contract
type Event struct {
	AccessPath     *AccessPath `protobuf:"bytes,1,opt,name=access_path,json=accessPath,proto3" json:"access_path,omitempty"`
	SequenceNumber uint64      `protobuf:"varint,2,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	EventData      []byte      `protobuf:"bytes,3,opt,name=event_data,json=eventData,proto3" json:"event_data,omitempty"`
}

func (m *Event) Reset()      { *m = Event{} }
func (*Event) ProtoMessage() {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f22242cb04491f9, []int{0}
}
func (m *Event) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return m.Size()
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

func (m *Event) GetAccessPath() *AccessPath {
	if m != nil {
		return m.AccessPath
	}
	return nil
}

func (m *Event) GetSequenceNumber() uint64 {
	if m != nil {
		return m.SequenceNumber
	}
	return 0
}

func (m *Event) GetEventData() []byte {
	if m != nil {
		return m.EventData
	}
	return nil
}

// An event along with the proof for the event
type EventWithProof struct {
	TransactionVersion uint64      `protobuf:"varint,1,opt,name=transaction_version,json=transactionVersion,proto3" json:"transaction_version,omitempty"`
	EventIndex         uint64      `protobuf:"varint,2,opt,name=event_index,json=eventIndex,proto3" json:"event_index,omitempty"`
	Event              *Event      `protobuf:"bytes,3,opt,name=event,proto3" json:"event,omitempty"`
	Proof              *EventProof `protobuf:"bytes,4,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (m *EventWithProof) Reset()      { *m = EventWithProof{} }
func (*EventWithProof) ProtoMessage() {}
func (*EventWithProof) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f22242cb04491f9, []int{1}
}
func (m *EventWithProof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventWithProof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventWithProof.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventWithProof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventWithProof.Merge(m, src)
}
func (m *EventWithProof) XXX_Size() int {
	return m.Size()
}
func (m *EventWithProof) XXX_DiscardUnknown() {
	xxx_messageInfo_EventWithProof.DiscardUnknown(m)
}

var xxx_messageInfo_EventWithProof proto.InternalMessageInfo

func (m *EventWithProof) GetTransactionVersion() uint64 {
	if m != nil {
		return m.TransactionVersion
	}
	return 0
}

func (m *EventWithProof) GetEventIndex() uint64 {
	if m != nil {
		return m.EventIndex
	}
	return 0
}

func (m *EventWithProof) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *EventWithProof) GetProof() *EventProof {
	if m != nil {
		return m.Proof
	}
	return nil
}

// A list of events.
type EventsList struct {
	Events []*Event `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
}

func (m *EventsList) Reset()      { *m = EventsList{} }
func (*EventsList) ProtoMessage() {}
func (*EventsList) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f22242cb04491f9, []int{2}
}
func (m *EventsList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventsList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventsList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventsList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventsList.Merge(m, src)
}
func (m *EventsList) XXX_Size() int {
	return m.Size()
}
func (m *EventsList) XXX_DiscardUnknown() {
	xxx_messageInfo_EventsList.DiscardUnknown(m)
}

var xxx_messageInfo_EventsList proto.InternalMessageInfo

func (m *EventsList) GetEvents() []*Event {
	if m != nil {
		return m.Events
	}
	return nil
}

// A list of EventList's, each representing all events for a transaction.
type EventsForVersions struct {
	EventsForVersion []*EventsList `protobuf:"bytes,1,rep,name=events_for_version,json=eventsForVersion,proto3" json:"events_for_version,omitempty"`
}

func (m *EventsForVersions) Reset()      { *m = EventsForVersions{} }
func (*EventsForVersions) ProtoMessage() {}
func (*EventsForVersions) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f22242cb04491f9, []int{3}
}
func (m *EventsForVersions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventsForVersions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventsForVersions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventsForVersions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventsForVersions.Merge(m, src)
}
func (m *EventsForVersions) XXX_Size() int {
	return m.Size()
}
func (m *EventsForVersions) XXX_DiscardUnknown() {
	xxx_messageInfo_EventsForVersions.DiscardUnknown(m)
}

var xxx_messageInfo_EventsForVersions proto.InternalMessageInfo

func (m *EventsForVersions) GetEventsForVersion() []*EventsList {
	if m != nil {
		return m.EventsForVersion
	}
	return nil
}

func init() {
	proto.RegisterType((*Event)(nil), "types.Event")
	proto.RegisterType((*EventWithProof)(nil), "types.EventWithProof")
	proto.RegisterType((*EventsList)(nil), "types.EventsList")
	proto.RegisterType((*EventsForVersions)(nil), "types.EventsForVersions")
}

func init() { proto.RegisterFile("events.proto", fileDescriptor_8f22242cb04491f9) }

var fileDescriptor_8f22242cb04491f9 = []byte{
	// 373 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0xc1, 0x4a, 0xeb, 0x40,
	0x14, 0x86, 0x33, 0xb7, 0x4d, 0xe1, 0x9e, 0x94, 0xde, 0xdb, 0x71, 0x13, 0x0a, 0x8e, 0x21, 0x08,
	0xed, 0xaa, 0x42, 0x74, 0x2f, 0x8a, 0x0a, 0x82, 0x48, 0x09, 0xa2, 0xcb, 0x30, 0x4d, 0xa7, 0x34,
	0x0b, 0x33, 0x31, 0x33, 0x2d, 0xba, 0x13, 0x7c, 0x01, 0x1f, 0xc3, 0x9d, 0xaf, 0xe1, 0xb2, 0xcb,
	0x2e, 0x6d, 0xba, 0x71, 0xd9, 0x47, 0x90, 0x9e, 0x89, 0x52, 0xeb, 0x2e, 0xf3, 0x7f, 0xe7, 0x9c,
	0xff, 0x3f, 0x27, 0x50, 0x17, 0x13, 0x91, 0x6a, 0xd5, 0xcd, 0x72, 0xa9, 0x25, 0xb5, 0xf5, 0x43,
	0x26, 0x54, 0xab, 0xc9, 0xe3, 0x58, 0x28, 0x15, 0x65, 0x5c, 0x8f, 0x0c, 0x69, 0x39, 0x59, 0x2e,
	0xe5, 0xd0, 0x3c, 0xfc, 0x27, 0x02, 0xf6, 0xe9, 0xaa, 0x8f, 0x06, 0xe0, 0xac, 0xd5, 0xba, 0xc4,
	0x23, 0x1d, 0x27, 0x68, 0x76, 0x71, 0x4c, 0xf7, 0x08, 0x49, 0x8f, 0xeb, 0x51, 0x08, 0xfc, 0xfb,
	0x9b, 0xb6, 0xe1, 0x9f, 0x12, 0x77, 0x63, 0x91, 0xc6, 0x22, 0x4a, 0xc7, 0xb7, 0x7d, 0x91, 0xbb,
	0x7f, 0x3c, 0xd2, 0xa9, 0x86, 0x8d, 0x2f, 0xf9, 0x12, 0x55, 0xba, 0x0d, 0x80, 0xe9, 0xa2, 0x01,
	0xd7, 0xdc, 0xad, 0x78, 0xa4, 0x53, 0x0f, 0xff, 0xa2, 0x72, 0xc2, 0x35, 0xf7, 0x5f, 0x09, 0x34,
	0x30, 0xc5, 0x4d, 0xa2, 0x47, 0xbd, 0x55, 0x3c, 0xba, 0x07, 0x5b, 0x3a, 0xe7, 0xa9, 0xe2, 0xb1,
	0x4e, 0x64, 0x1a, 0x4d, 0x44, 0xae, 0x12, 0x99, 0x62, 0xac, 0x6a, 0x48, 0xd7, 0xd0, 0xb5, 0x21,
	0x74, 0x07, 0x1c, 0x63, 0x91, 0xa4, 0x03, 0x71, 0x5f, 0xe6, 0x30, 0xae, 0xe7, 0x2b, 0x85, 0xfa,
	0x60, 0xe3, 0x0b, 0xed, 0x9d, 0xa0, 0x5e, 0xae, 0x86, 0xbe, 0xa1, 0x41, 0xb4, 0x0d, 0x36, 0x5e,
	0xc7, 0xad, 0xfe, 0x58, 0x1f, 0x6b, 0x30, 0x57, 0x68, 0xb8, 0x1f, 0x00, 0xa0, 0xa8, 0x2e, 0x12,
	0xa5, 0xe9, 0x2e, 0xd4, 0xcc, 0xf1, 0x5d, 0xe2, 0x55, 0x7e, 0xcd, 0x2e, 0x99, 0x7f, 0x05, 0x4d,
	0xd3, 0x73, 0x26, 0xf3, 0x32, 0xb5, 0xa2, 0x87, 0x40, 0x0d, 0x8e, 0x86, 0x32, 0x5f, 0x5b, 0xb3,
	0xb2, 0x69, 0x8f, 0x4e, 0xe1, 0x7f, 0xb1, 0x31, 0xe1, 0xf8, 0x60, 0x3a, 0x67, 0xd6, 0x6c, 0xce,
	0xac, 0xe5, 0x9c, 0x91, 0xc7, 0x82, 0x91, 0x97, 0x82, 0x91, 0xb7, 0x82, 0x91, 0x69, 0xc1, 0xc8,
	0x7b, 0xc1, 0xc8, 0x47, 0xc1, 0xac, 0x65, 0xc1, 0xc8, 0xf3, 0x82, 0x59, 0xd3, 0x05, 0xb3, 0x66,
	0x0b, 0x66, 0xf5, 0x6b, 0xf8, 0xfb, 0xf7, 0x3f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x5c, 0xf9, 0x67,
	0xe0, 0x35, 0x02, 0x00, 0x00,
}

func (this *Event) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Event)
	if !ok {
		that2, ok := that.(Event)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AccessPath.Equal(that1.AccessPath) {
		return false
	}
	if this.SequenceNumber != that1.SequenceNumber {
		return false
	}
	if !bytes.Equal(this.EventData, that1.EventData) {
		return false
	}
	return true
}
func (this *EventWithProof) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EventWithProof)
	if !ok {
		that2, ok := that.(EventWithProof)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TransactionVersion != that1.TransactionVersion {
		return false
	}
	if this.EventIndex != that1.EventIndex {
		return false
	}
	if !this.Event.Equal(that1.Event) {
		return false
	}
	if !this.Proof.Equal(that1.Proof) {
		return false
	}
	return true
}
func (this *EventsList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EventsList)
	if !ok {
		that2, ok := that.(EventsList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Events) != len(that1.Events) {
		return false
	}
	for i := range this.Events {
		if !this.Events[i].Equal(that1.Events[i]) {
			return false
		}
	}
	return true
}
func (this *EventsForVersions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EventsForVersions)
	if !ok {
		that2, ok := that.(EventsForVersions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.EventsForVersion) != len(that1.EventsForVersion) {
		return false
	}
	for i := range this.EventsForVersion {
		if !this.EventsForVersion[i].Equal(that1.EventsForVersion[i]) {
			return false
		}
	}
	return true
}
func (this *Event) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&types.Event{")
	if this.AccessPath != nil {
		s = append(s, "AccessPath: "+fmt.Sprintf("%#v", this.AccessPath)+",\n")
	}
	s = append(s, "SequenceNumber: "+fmt.Sprintf("%#v", this.SequenceNumber)+",\n")
	s = append(s, "EventData: "+fmt.Sprintf("%#v", this.EventData)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EventWithProof) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&types.EventWithProof{")
	s = append(s, "TransactionVersion: "+fmt.Sprintf("%#v", this.TransactionVersion)+",\n")
	s = append(s, "EventIndex: "+fmt.Sprintf("%#v", this.EventIndex)+",\n")
	if this.Event != nil {
		s = append(s, "Event: "+fmt.Sprintf("%#v", this.Event)+",\n")
	}
	if this.Proof != nil {
		s = append(s, "Proof: "+fmt.Sprintf("%#v", this.Proof)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EventsList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&types.EventsList{")
	if this.Events != nil {
		s = append(s, "Events: "+fmt.Sprintf("%#v", this.Events)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EventsForVersions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&types.EventsForVersions{")
	if this.EventsForVersion != nil {
		s = append(s, "EventsForVersion: "+fmt.Sprintf("%#v", this.EventsForVersion)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringEvents(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Event) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AccessPath != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.AccessPath.Size()))
		n1, err1 := m.AccessPath.MarshalTo(dAtA[i:])
		if err1 != nil {
			return 0, err1
		}
		i += n1
	}
	if m.SequenceNumber != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.SequenceNumber))
	}
	if len(m.EventData) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.EventData)))
		i += copy(dAtA[i:], m.EventData)
	}
	return i, nil
}

func (m *EventWithProof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventWithProof) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TransactionVersion != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.TransactionVersion))
	}
	if m.EventIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.EventIndex))
	}
	if m.Event != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.Event.Size()))
		n2, err2 := m.Event.MarshalTo(dAtA[i:])
		if err2 != nil {
			return 0, err2
		}
		i += n2
	}
	if m.Proof != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.Proof.Size()))
		n3, err3 := m.Proof.MarshalTo(dAtA[i:])
		if err3 != nil {
			return 0, err3
		}
		i += n3
	}
	return i, nil
}

func (m *EventsList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventsList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0xa
			i++
			i = encodeVarintEvents(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *EventsForVersions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventsForVersions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.EventsForVersion) > 0 {
		for _, msg := range m.EventsForVersion {
			dAtA[i] = 0xa
			i++
			i = encodeVarintEvents(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Event) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AccessPath != nil {
		l = m.AccessPath.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.SequenceNumber != 0 {
		n += 1 + sovEvents(uint64(m.SequenceNumber))
	}
	l = len(m.EventData)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventWithProof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TransactionVersion != 0 {
		n += 1 + sovEvents(uint64(m.TransactionVersion))
	}
	if m.EventIndex != 0 {
		n += 1 + sovEvents(uint64(m.EventIndex))
	}
	if m.Event != nil {
		l = m.Event.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Proof != nil {
		l = m.Proof.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventsList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	return n
}

func (m *EventsForVersions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EventsForVersion) > 0 {
		for _, e := range m.EventsForVersion {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Event) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Event{`,
		`AccessPath:` + strings.Replace(fmt.Sprintf("%v", this.AccessPath), "AccessPath", "AccessPath", 1) + `,`,
		`SequenceNumber:` + fmt.Sprintf("%v", this.SequenceNumber) + `,`,
		`EventData:` + fmt.Sprintf("%v", this.EventData) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EventWithProof) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EventWithProof{`,
		`TransactionVersion:` + fmt.Sprintf("%v", this.TransactionVersion) + `,`,
		`EventIndex:` + fmt.Sprintf("%v", this.EventIndex) + `,`,
		`Event:` + strings.Replace(this.Event.String(), "Event", "Event", 1) + `,`,
		`Proof:` + strings.Replace(fmt.Sprintf("%v", this.Proof), "EventProof", "EventProof", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EventsList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForEvents := "[]*Event{"
	for _, f := range this.Events {
		repeatedStringForEvents += strings.Replace(f.String(), "Event", "Event", 1) + ","
	}
	repeatedStringForEvents += "}"
	s := strings.Join([]string{`&EventsList{`,
		`Events:` + repeatedStringForEvents + `,`,
		`}`,
	}, "")
	return s
}
func (this *EventsForVersions) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForEventsForVersion := "[]*EventsList{"
	for _, f := range this.EventsForVersion {
		repeatedStringForEventsForVersion += strings.Replace(f.String(), "EventsList", "EventsList", 1) + ","
	}
	repeatedStringForEventsForVersion += "}"
	s := strings.Join([]string{`&EventsForVersions{`,
		`EventsForVersion:` + repeatedStringForEventsForVersion + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringEvents(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Event) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Event: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Event: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessPath", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AccessPath == nil {
				m.AccessPath = &AccessPath{}
			}
			if err := m.AccessPath.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SequenceNumber", wireType)
			}
			m.SequenceNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SequenceNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventData = append(m.EventData[:0], dAtA[iNdEx:postIndex]...)
			if m.EventData == nil {
				m.EventData = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventWithProof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventWithProof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventWithProof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionVersion", wireType)
			}
			m.TransactionVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TransactionVersion |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventIndex", wireType)
			}
			m.EventIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Event == nil {
				m.Event = &Event{}
			}
			if err := m.Event.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Proof == nil {
				m.Proof = &EventProof{}
			}
			if err := m.Proof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventsList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventsList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventsList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &Event{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventsForVersions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventsForVersions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventsForVersions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventsForVersion", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventsForVersion = append(m.EventsForVersion, &EventsList{})
			if err := m.EventsForVersion[len(m.EventsForVersion)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthEvents
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowEvents
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipEvents(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthEvents
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthEvents = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents   = fmt.Errorf("proto: integer overflow")
)
