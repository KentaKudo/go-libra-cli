// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: validator_change.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// This is used to prove validator changes.  When a validator is changing, it
// triggers an event on /validator_change_account/events/sent.  To tell the
// client about validator changes, we query
// /validator_change_account/events/sent to get all versions that contain
// validator changes after the version that we are trying to update from. For
// each of these versions, the old validator set would have signed the ledger
// info at that version.  The client needs this as well as the event results +
// proof.  The client can then verify that these events were under the current
// tree and that the changes were signed by the old validators (and that the
// events correctly show which validators are the new validators).
//
// This message represents a single validator change event and the proof that
// corresponds to it
type ValidatorChangeEventWithProof struct {
	LedgerInfoWithSigs *LedgerInfoWithSignatures `protobuf:"bytes,1,opt,name=ledger_info_with_sigs,json=ledgerInfoWithSigs,proto3" json:"ledger_info_with_sigs,omitempty"`
	EventWithProof     *EventWithProof           `protobuf:"bytes,2,opt,name=event_with_proof,json=eventWithProof,proto3" json:"event_with_proof,omitempty"`
}

func (m *ValidatorChangeEventWithProof) Reset()      { *m = ValidatorChangeEventWithProof{} }
func (*ValidatorChangeEventWithProof) ProtoMessage() {}
func (*ValidatorChangeEventWithProof) Descriptor() ([]byte, []int) {
	return fileDescriptor_484a7446a4b3dd15, []int{0}
}
func (m *ValidatorChangeEventWithProof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorChangeEventWithProof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorChangeEventWithProof.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorChangeEventWithProof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorChangeEventWithProof.Merge(m, src)
}
func (m *ValidatorChangeEventWithProof) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorChangeEventWithProof) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorChangeEventWithProof.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorChangeEventWithProof proto.InternalMessageInfo

func (m *ValidatorChangeEventWithProof) GetLedgerInfoWithSigs() *LedgerInfoWithSignatures {
	if m != nil {
		return m.LedgerInfoWithSigs
	}
	return nil
}

func (m *ValidatorChangeEventWithProof) GetEventWithProof() *EventWithProof {
	if m != nil {
		return m.EventWithProof
	}
	return nil
}

func init() {
	proto.RegisterType((*ValidatorChangeEventWithProof)(nil), "types.ValidatorChangeEventWithProof")
}

func init() { proto.RegisterFile("validator_change.proto", fileDescriptor_484a7446a4b3dd15) }

var fileDescriptor_484a7446a4b3dd15 = []byte{
	// 245 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2b, 0x4b, 0xcc, 0xc9,
	0x4c, 0x49, 0x2c, 0xc9, 0x2f, 0x8a, 0x4f, 0xce, 0x48, 0xcc, 0x4b, 0x4f, 0xd5, 0x2b, 0x28, 0xca,
	0x2f, 0xc9, 0x17, 0x62, 0x2d, 0xa9, 0x2c, 0x48, 0x2d, 0x96, 0xe2, 0x49, 0x2d, 0x4b, 0xcd, 0x2b,
	0x29, 0x86, 0x08, 0x4a, 0x09, 0xe6, 0xa4, 0xa6, 0xa4, 0xa7, 0x16, 0xc5, 0x67, 0xe6, 0xa5, 0xe5,
	0x43, 0x84, 0x94, 0xb6, 0x30, 0x72, 0xc9, 0x86, 0xc1, 0x8c, 0x70, 0x06, 0x9b, 0xe0, 0x0a, 0xd2,
	0x12, 0x9e, 0x59, 0x92, 0x11, 0x50, 0x94, 0x9f, 0x9f, 0x26, 0x14, 0xc4, 0x25, 0x8a, 0xa4, 0x2d,
	0xbe, 0x3c, 0xb3, 0x24, 0x23, 0xbe, 0x38, 0x33, 0xbd, 0x58, 0x82, 0x51, 0x81, 0x51, 0x83, 0xdb,
	0x48, 0x5e, 0x0f, 0x6c, 0x93, 0x9e, 0x0f, 0x58, 0x8d, 0x67, 0x5e, 0x5a, 0x3e, 0x48, 0x6b, 0x70,
	0x66, 0x7a, 0x5e, 0x62, 0x49, 0x69, 0x51, 0x6a, 0x71, 0x90, 0x50, 0x0e, 0xba, 0x4c, 0xb1, 0x90,
	0x3d, 0x97, 0x00, 0xd8, 0x61, 0x10, 0xd3, 0x0a, 0x40, 0xf6, 0x48, 0x30, 0x81, 0x8d, 0x13, 0x85,
	0x1a, 0x87, 0xea, 0x88, 0x20, 0xbe, 0x54, 0x14, 0xbe, 0x93, 0xc9, 0x85, 0x87, 0x72, 0x0c, 0x37,
	0x1e, 0xca, 0x31, 0x7c, 0x78, 0x28, 0xc7, 0xd8, 0xf0, 0x48, 0x8e, 0x71, 0xc5, 0x23, 0x39, 0xc6,
	0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63, 0x7c, 0xf0, 0x48, 0x8e, 0xf1, 0xc5, 0x23, 0x39,
	0x86, 0x0f, 0x8f, 0xe4, 0x18, 0x27, 0x3c, 0x96, 0x63, 0xb8, 0xf0, 0x58, 0x8e, 0xe1, 0xc6, 0x63,
	0x39, 0x86, 0x24, 0x36, 0xb0, 0x9f, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xde, 0x74, 0x7a,
	0x78, 0x35, 0x01, 0x00, 0x00,
}

func (this *ValidatorChangeEventWithProof) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ValidatorChangeEventWithProof)
	if !ok {
		that2, ok := that.(ValidatorChangeEventWithProof)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LedgerInfoWithSigs.Equal(that1.LedgerInfoWithSigs) {
		return false
	}
	if !this.EventWithProof.Equal(that1.EventWithProof) {
		return false
	}
	return true
}
func (this *ValidatorChangeEventWithProof) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&types.ValidatorChangeEventWithProof{")
	if this.LedgerInfoWithSigs != nil {
		s = append(s, "LedgerInfoWithSigs: "+fmt.Sprintf("%#v", this.LedgerInfoWithSigs)+",\n")
	}
	if this.EventWithProof != nil {
		s = append(s, "EventWithProof: "+fmt.Sprintf("%#v", this.EventWithProof)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringValidatorChange(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ValidatorChangeEventWithProof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorChangeEventWithProof) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LedgerInfoWithSigs != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintValidatorChange(dAtA, i, uint64(m.LedgerInfoWithSigs.Size()))
		n1, err1 := m.LedgerInfoWithSigs.MarshalTo(dAtA[i:])
		if err1 != nil {
			return 0, err1
		}
		i += n1
	}
	if m.EventWithProof != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintValidatorChange(dAtA, i, uint64(m.EventWithProof.Size()))
		n2, err2 := m.EventWithProof.MarshalTo(dAtA[i:])
		if err2 != nil {
			return 0, err2
		}
		i += n2
	}
	return i, nil
}

func encodeVarintValidatorChange(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ValidatorChangeEventWithProof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LedgerInfoWithSigs != nil {
		l = m.LedgerInfoWithSigs.Size()
		n += 1 + l + sovValidatorChange(uint64(l))
	}
	if m.EventWithProof != nil {
		l = m.EventWithProof.Size()
		n += 1 + l + sovValidatorChange(uint64(l))
	}
	return n
}

func sovValidatorChange(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozValidatorChange(x uint64) (n int) {
	return sovValidatorChange(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ValidatorChangeEventWithProof) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ValidatorChangeEventWithProof{`,
		`LedgerInfoWithSigs:` + strings.Replace(fmt.Sprintf("%v", this.LedgerInfoWithSigs), "LedgerInfoWithSignatures", "LedgerInfoWithSignatures", 1) + `,`,
		`EventWithProof:` + strings.Replace(fmt.Sprintf("%v", this.EventWithProof), "EventWithProof", "EventWithProof", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringValidatorChange(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ValidatorChangeEventWithProof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidatorChange
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorChangeEventWithProof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorChangeEventWithProof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LedgerInfoWithSigs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidatorChange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidatorChange
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValidatorChange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LedgerInfoWithSigs == nil {
				m.LedgerInfoWithSigs = &LedgerInfoWithSignatures{}
			}
			if err := m.LedgerInfoWithSigs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventWithProof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidatorChange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidatorChange
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValidatorChange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EventWithProof == nil {
				m.EventWithProof = &EventWithProof{}
			}
			if err := m.EventWithProof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValidatorChange(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidatorChange
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValidatorChange
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipValidatorChange(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowValidatorChange
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowValidatorChange
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowValidatorChange
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthValidatorChange
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthValidatorChange
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowValidatorChange
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipValidatorChange(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthValidatorChange
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthValidatorChange = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowValidatorChange   = fmt.Errorf("proto: integer overflow")
)
