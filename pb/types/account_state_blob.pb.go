// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: account_state_blob.proto

package types

import (
	bytes "bytes"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type AccountStateBlob struct {
	Blob []byte `protobuf:"bytes,1,opt,name=blob,proto3" json:"blob,omitempty"`
}

func (m *AccountStateBlob) Reset()      { *m = AccountStateBlob{} }
func (*AccountStateBlob) ProtoMessage() {}
func (*AccountStateBlob) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0fc530c6a6b052a, []int{0}
}
func (m *AccountStateBlob) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountStateBlob) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountStateBlob.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountStateBlob) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountStateBlob.Merge(m, src)
}
func (m *AccountStateBlob) XXX_Size() int {
	return m.Size()
}
func (m *AccountStateBlob) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountStateBlob.DiscardUnknown(m)
}

var xxx_messageInfo_AccountStateBlob proto.InternalMessageInfo

func (m *AccountStateBlob) GetBlob() []byte {
	if m != nil {
		return m.Blob
	}
	return nil
}

type AccountStateWithProof struct {
	Version uint64             `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Blob    *AccountStateBlob  `protobuf:"bytes,2,opt,name=blob,proto3" json:"blob,omitempty"`
	Proof   *AccountStateProof `protobuf:"bytes,3,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (m *AccountStateWithProof) Reset()      { *m = AccountStateWithProof{} }
func (*AccountStateWithProof) ProtoMessage() {}
func (*AccountStateWithProof) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0fc530c6a6b052a, []int{1}
}
func (m *AccountStateWithProof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountStateWithProof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountStateWithProof.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountStateWithProof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountStateWithProof.Merge(m, src)
}
func (m *AccountStateWithProof) XXX_Size() int {
	return m.Size()
}
func (m *AccountStateWithProof) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountStateWithProof.DiscardUnknown(m)
}

var xxx_messageInfo_AccountStateWithProof proto.InternalMessageInfo

func (m *AccountStateWithProof) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *AccountStateWithProof) GetBlob() *AccountStateBlob {
	if m != nil {
		return m.Blob
	}
	return nil
}

func (m *AccountStateWithProof) GetProof() *AccountStateProof {
	if m != nil {
		return m.Proof
	}
	return nil
}

func init() {
	proto.RegisterType((*AccountStateBlob)(nil), "types.AccountStateBlob")
	proto.RegisterType((*AccountStateWithProof)(nil), "types.AccountStateWithProof")
}

func init() { proto.RegisterFile("account_state_blob.proto", fileDescriptor_d0fc530c6a6b052a) }

var fileDescriptor_d0fc530c6a6b052a = []byte{
	// 226 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x48, 0x4c, 0x4e, 0xce,
	0x2f, 0xcd, 0x2b, 0x89, 0x2f, 0x2e, 0x49, 0x2c, 0x49, 0x8d, 0x4f, 0xca, 0xc9, 0x4f, 0xd2, 0x2b,
	0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2d, 0xa9, 0x2c, 0x48, 0x2d, 0x96, 0xe2, 0x2e, 0x28, 0xca,
	0xcf, 0x4f, 0x83, 0x88, 0x29, 0xa9, 0x71, 0x09, 0x38, 0x42, 0xd4, 0x07, 0x83, 0x94, 0x3b, 0xe5,
	0xe4, 0x27, 0x09, 0x09, 0x71, 0xb1, 0x80, 0x74, 0x49, 0x30, 0x2a, 0x30, 0x6a, 0xf0, 0x04, 0x81,
	0xd9, 0x4a, 0x7d, 0x8c, 0x5c, 0xa2, 0xc8, 0x0a, 0xc3, 0x33, 0x4b, 0x32, 0x02, 0x40, 0xe6, 0x08,
	0x49, 0x70, 0xb1, 0x97, 0xa5, 0x16, 0x15, 0x67, 0xe6, 0xe7, 0x81, 0x35, 0xb0, 0x04, 0xc1, 0xb8,
	0x42, 0xda, 0x50, 0x73, 0x98, 0x14, 0x18, 0x35, 0xb8, 0x8d, 0xc4, 0xf5, 0xc0, 0xd6, 0xeb, 0xa1,
	0x5b, 0x07, 0xb1, 0x40, 0x48, 0x8f, 0x8b, 0x15, 0xec, 0x2e, 0x09, 0x66, 0xb0, 0x6a, 0x09, 0x2c,
	0xaa, 0xc1, 0xf6, 0x05, 0x41, 0x94, 0x39, 0x99, 0x5c, 0x78, 0x28, 0xc7, 0x70, 0xe3, 0xa1, 0x1c,
	0xc3, 0x87, 0x87, 0x72, 0x8c, 0x0d, 0x8f, 0xe4, 0x18, 0x57, 0x3c, 0x92, 0x63, 0x3c, 0xf1, 0x48,
	0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x07, 0x8f, 0xe4, 0x18, 0x5f, 0x3c, 0x92, 0x63, 0xf8, 0xf0,
	0x48, 0x8e, 0x71, 0xc2, 0x63, 0x39, 0x86, 0x0b, 0x8f, 0xe5, 0x18, 0x6e, 0x3c, 0x96, 0x63, 0x48,
	0x62, 0x03, 0xfb, 0xda, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x32, 0x68, 0xc5, 0x57, 0x25, 0x01,
	0x00, 0x00,
}

func (this *AccountStateBlob) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AccountStateBlob)
	if !ok {
		that2, ok := that.(AccountStateBlob)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Blob, that1.Blob) {
		return false
	}
	return true
}
func (this *AccountStateWithProof) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AccountStateWithProof)
	if !ok {
		that2, ok := that.(AccountStateWithProof)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if !this.Blob.Equal(that1.Blob) {
		return false
	}
	if !this.Proof.Equal(that1.Proof) {
		return false
	}
	return true
}
func (this *AccountStateBlob) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&types.AccountStateBlob{")
	s = append(s, "Blob: "+fmt.Sprintf("%#v", this.Blob)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AccountStateWithProof) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&types.AccountStateWithProof{")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	if this.Blob != nil {
		s = append(s, "Blob: "+fmt.Sprintf("%#v", this.Blob)+",\n")
	}
	if this.Proof != nil {
		s = append(s, "Proof: "+fmt.Sprintf("%#v", this.Proof)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringAccountStateBlob(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *AccountStateBlob) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountStateBlob) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Blob) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAccountStateBlob(dAtA, i, uint64(len(m.Blob)))
		i += copy(dAtA[i:], m.Blob)
	}
	return i, nil
}

func (m *AccountStateWithProof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountStateWithProof) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAccountStateBlob(dAtA, i, uint64(m.Version))
	}
	if m.Blob != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAccountStateBlob(dAtA, i, uint64(m.Blob.Size()))
		n1, err1 := m.Blob.MarshalTo(dAtA[i:])
		if err1 != nil {
			return 0, err1
		}
		i += n1
	}
	if m.Proof != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAccountStateBlob(dAtA, i, uint64(m.Proof.Size()))
		n2, err2 := m.Proof.MarshalTo(dAtA[i:])
		if err2 != nil {
			return 0, err2
		}
		i += n2
	}
	return i, nil
}

func encodeVarintAccountStateBlob(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AccountStateBlob) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Blob)
	if l > 0 {
		n += 1 + l + sovAccountStateBlob(uint64(l))
	}
	return n
}

func (m *AccountStateWithProof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovAccountStateBlob(uint64(m.Version))
	}
	if m.Blob != nil {
		l = m.Blob.Size()
		n += 1 + l + sovAccountStateBlob(uint64(l))
	}
	if m.Proof != nil {
		l = m.Proof.Size()
		n += 1 + l + sovAccountStateBlob(uint64(l))
	}
	return n
}

func sovAccountStateBlob(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAccountStateBlob(x uint64) (n int) {
	return sovAccountStateBlob(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *AccountStateBlob) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AccountStateBlob{`,
		`Blob:` + fmt.Sprintf("%v", this.Blob) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AccountStateWithProof) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AccountStateWithProof{`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`Blob:` + strings.Replace(this.Blob.String(), "AccountStateBlob", "AccountStateBlob", 1) + `,`,
		`Proof:` + strings.Replace(fmt.Sprintf("%v", this.Proof), "AccountStateProof", "AccountStateProof", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringAccountStateBlob(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *AccountStateBlob) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccountStateBlob
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountStateBlob: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountStateBlob: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blob", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountStateBlob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAccountStateBlob
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAccountStateBlob
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blob = append(m.Blob[:0], dAtA[iNdEx:postIndex]...)
			if m.Blob == nil {
				m.Blob = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccountStateBlob(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAccountStateBlob
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAccountStateBlob
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountStateWithProof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccountStateBlob
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountStateWithProof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountStateWithProof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountStateBlob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blob", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountStateBlob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccountStateBlob
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAccountStateBlob
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Blob == nil {
				m.Blob = &AccountStateBlob{}
			}
			if err := m.Blob.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountStateBlob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccountStateBlob
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAccountStateBlob
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Proof == nil {
				m.Proof = &AccountStateProof{}
			}
			if err := m.Proof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccountStateBlob(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAccountStateBlob
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAccountStateBlob
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAccountStateBlob(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAccountStateBlob
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAccountStateBlob
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAccountStateBlob
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAccountStateBlob
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthAccountStateBlob
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAccountStateBlob
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAccountStateBlob(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthAccountStateBlob
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAccountStateBlob = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAccountStateBlob   = fmt.Errorf("proto: integer overflow")
)
