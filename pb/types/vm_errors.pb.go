// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: vm_errors.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// The status of a transaction as determined by the prologue.
type VMValidationStatusCode int32

const (
	// We don't want the default value to be valid
	UnknownValidationStatus VMValidationStatusCode = 0
	// The transaction has a bad signature
	InvalidSignature VMValidationStatusCode = 1
	// Bad account authentication key
	InvalidAuthKey VMValidationStatusCode = 2
	// Sequence number is too old
	SequenceNumberTooOld VMValidationStatusCode = 3
	// Sequence number is too new
	SequenceNumberTooNew VMValidationStatusCode = 4
	// Insufficient balance to pay minimum transaction fee
	InsufficientBalanceForTransactionFee VMValidationStatusCode = 5
	// The transaction has expired
	TransactionExpired VMValidationStatusCode = 6
	// The sending account does not exist
	SendingAccountDoesNotExist VMValidationStatusCode = 7
	// This write set transaction was rejected because it did not meet the
	// requirements for one.
	RejectedWriteSet VMValidationStatusCode = 8
	// This write set transaction cannot be applied to the current state.
	InvalidWriteSet VMValidationStatusCode = 9
	// Length of program field in raw transaction exceeded max length
	ExceededMaxTransactionSize VMValidationStatusCode = 10
	// This script is not on our whitelist of script.
	UnknownScript VMValidationStatusCode = 11
	// Transaction is trying to publish a new module.
	UnknownModule VMValidationStatusCode = 12
	// Max gas units submitted with transaction exceeds max gas units bound
	// in VM
	MaxGasUnitsExceedsMaxGasUnitsBound VMValidationStatusCode = 13
	// Max gas units submitted with transaction not enough to cover the
	// intrinsic cost of the transaction.
	MaxGasUnitsBelowMinTransactionGasUnits VMValidationStatusCode = 14
	// Gas unit price submitted with transaction is below minimum gas price
	// set in the VM.
	GasUnitPriceBelowMinBound VMValidationStatusCode = 15
	// Gas unit price submitted with the transaction is above the maximum
	// gas price set in the VM.
	GasUnitPriceAboveMaxBound VMValidationStatusCode = 16
)

var VMValidationStatusCode_name = map[int32]string{
	0:  "UnknownValidationStatus",
	1:  "InvalidSignature",
	2:  "InvalidAuthKey",
	3:  "SequenceNumberTooOld",
	4:  "SequenceNumberTooNew",
	5:  "InsufficientBalanceForTransactionFee",
	6:  "TransactionExpired",
	7:  "SendingAccountDoesNotExist",
	8:  "RejectedWriteSet",
	9:  "InvalidWriteSet",
	10: "ExceededMaxTransactionSize",
	11: "UnknownScript",
	12: "UnknownModule",
	13: "MaxGasUnitsExceedsMaxGasUnitsBound",
	14: "MaxGasUnitsBelowMinTransactionGasUnits",
	15: "GasUnitPriceBelowMinBound",
	16: "GasUnitPriceAboveMaxBound",
}

var VMValidationStatusCode_value = map[string]int32{
	"UnknownValidationStatus":                0,
	"InvalidSignature":                       1,
	"InvalidAuthKey":                         2,
	"SequenceNumberTooOld":                   3,
	"SequenceNumberTooNew":                   4,
	"InsufficientBalanceForTransactionFee":   5,
	"TransactionExpired":                     6,
	"SendingAccountDoesNotExist":             7,
	"RejectedWriteSet":                       8,
	"InvalidWriteSet":                        9,
	"ExceededMaxTransactionSize":             10,
	"UnknownScript":                          11,
	"UnknownModule":                          12,
	"MaxGasUnitsExceedsMaxGasUnitsBound":     13,
	"MaxGasUnitsBelowMinTransactionGasUnits": 14,
	"GasUnitPriceBelowMinBound":              15,
	"GasUnitPriceAboveMaxBound":              16,
}

func (VMValidationStatusCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5824ced5fb3a3c2c, []int{0}
}

// When a code module/script is published it is verified. These are the
// possible errors that can arise from the verification process.
type VMVerificationErrorKind int32

const (
	// Likewise default to a unknown verification error
	UnknownVerificationError            VMVerificationErrorKind = 0
	IndexOutOfBounds                    VMVerificationErrorKind = 1
	RangeOutOfBounds                    VMVerificationErrorKind = 2
	InvalidSignatureToken               VMVerificationErrorKind = 3
	InvalidFieldDefReference            VMVerificationErrorKind = 4
	RecursiveStructDefinition           VMVerificationErrorKind = 5
	InvalidResourceField                VMVerificationErrorKind = 6
	InvalidFallThrough                  VMVerificationErrorKind = 7
	JoinFailure                         VMVerificationErrorKind = 8
	NegativeStackSizeWithinBlock        VMVerificationErrorKind = 9
	UnbalancedStack                     VMVerificationErrorKind = 10
	InvalidMainFunctionSignature        VMVerificationErrorKind = 11
	DuplicateElement                    VMVerificationErrorKind = 12
	InvalidModuleHandle                 VMVerificationErrorKind = 13
	UnimplementedHandle                 VMVerificationErrorKind = 14
	InconsistentFields                  VMVerificationErrorKind = 15
	UnusedFields                        VMVerificationErrorKind = 16
	LookupFailed                        VMVerificationErrorKind = 17
	VisibilityMismatch                  VMVerificationErrorKind = 18
	TypeResolutionFailure               VMVerificationErrorKind = 19
	TypeMismatch                        VMVerificationErrorKind = 20
	MissingDependency                   VMVerificationErrorKind = 21
	PopReferenceError                   VMVerificationErrorKind = 22
	PopResourceError                    VMVerificationErrorKind = 23
	ReleaseRefTypeMismatchError         VMVerificationErrorKind = 24
	BrTypeMismatchError                 VMVerificationErrorKind = 25
	AssertTypeMismatchError             VMVerificationErrorKind = 26
	StLocTypeMismatchError              VMVerificationErrorKind = 27
	StLocUnsafeToDestroyError           VMVerificationErrorKind = 28
	RetUnsafeToDestroyError             VMVerificationErrorKind = 29
	RetTypeMismatchError                VMVerificationErrorKind = 30
	FreezeRefTypeMismatchError          VMVerificationErrorKind = 31
	FreezeRefExistsMutableBorrowError   VMVerificationErrorKind = 32
	BorrowFieldTypeMismatchError        VMVerificationErrorKind = 33
	BorrowFieldBadFieldError            VMVerificationErrorKind = 34
	BorrowFieldExistsMutableBorrowError VMVerificationErrorKind = 35
	CopyLocUnavailableError             VMVerificationErrorKind = 36
	CopyLocResourceError                VMVerificationErrorKind = 37
	CopyLocExistsBorrowError            VMVerificationErrorKind = 38
	MoveLocUnavailableError             VMVerificationErrorKind = 39
	MoveLocExistsBorrowError            VMVerificationErrorKind = 40
	BorrowLocReferenceError             VMVerificationErrorKind = 41
	BorrowLocUnavailableError           VMVerificationErrorKind = 42
	BorrowLocExistsBorrowError          VMVerificationErrorKind = 43
	CallTypeMismatchError               VMVerificationErrorKind = 44
	CallBorrowedMutableReferenceError   VMVerificationErrorKind = 45
	PackTypeMismatchError               VMVerificationErrorKind = 46
	UnpackTypeMismatchError             VMVerificationErrorKind = 47
	ReadRefTypeMismatchError            VMVerificationErrorKind = 48
	ReadRefResourceError                VMVerificationErrorKind = 49
	ReadRefExistsMutableBorrowError     VMVerificationErrorKind = 50
	WriteRefTypeMismatchError           VMVerificationErrorKind = 51
	WriteRefResourceError               VMVerificationErrorKind = 52
	WriteRefExistsBorrowError           VMVerificationErrorKind = 53
	WriteRefNoMutableReferenceError     VMVerificationErrorKind = 54
	IntegerOpTypeMismatchError          VMVerificationErrorKind = 55
	BooleanOpTypeMismatchError          VMVerificationErrorKind = 56
	EqualityOpTypeMismatchError         VMVerificationErrorKind = 57
	ExistsResourceTypeMismatchError     VMVerificationErrorKind = 58
	BorrowGlobalTypeMismatchError       VMVerificationErrorKind = 59
	BorrowGlobalNoResourceError         VMVerificationErrorKind = 60
	MoveFromTypeMismatchError           VMVerificationErrorKind = 61
	MoveFromNoResourceError             VMVerificationErrorKind = 62
	MoveToSenderTypeMismatchError       VMVerificationErrorKind = 63
	MoveToSenderNoResourceError         VMVerificationErrorKind = 64
	CreateAccountTypeMismatchError      VMVerificationErrorKind = 65
	// The self address of a module the transaction is publishing is not the sender address
	ModuleAddressDoesNotMatchSender VMVerificationErrorKind = 66
	// The module does not have any module handles. Each module or script must have at least one module handle.
	NoModuleHandles VMVerificationErrorKind = 67
)

var VMVerificationErrorKind_name = map[int32]string{
	0:  "UnknownVerificationError",
	1:  "IndexOutOfBounds",
	2:  "RangeOutOfBounds",
	3:  "InvalidSignatureToken",
	4:  "InvalidFieldDefReference",
	5:  "RecursiveStructDefinition",
	6:  "InvalidResourceField",
	7:  "InvalidFallThrough",
	8:  "JoinFailure",
	9:  "NegativeStackSizeWithinBlock",
	10: "UnbalancedStack",
	11: "InvalidMainFunctionSignature",
	12: "DuplicateElement",
	13: "InvalidModuleHandle",
	14: "UnimplementedHandle",
	15: "InconsistentFields",
	16: "UnusedFields",
	17: "LookupFailed",
	18: "VisibilityMismatch",
	19: "TypeResolutionFailure",
	20: "TypeMismatch",
	21: "MissingDependency",
	22: "PopReferenceError",
	23: "PopResourceError",
	24: "ReleaseRefTypeMismatchError",
	25: "BrTypeMismatchError",
	26: "AssertTypeMismatchError",
	27: "StLocTypeMismatchError",
	28: "StLocUnsafeToDestroyError",
	29: "RetUnsafeToDestroyError",
	30: "RetTypeMismatchError",
	31: "FreezeRefTypeMismatchError",
	32: "FreezeRefExistsMutableBorrowError",
	33: "BorrowFieldTypeMismatchError",
	34: "BorrowFieldBadFieldError",
	35: "BorrowFieldExistsMutableBorrowError",
	36: "CopyLocUnavailableError",
	37: "CopyLocResourceError",
	38: "CopyLocExistsBorrowError",
	39: "MoveLocUnavailableError",
	40: "MoveLocExistsBorrowError",
	41: "BorrowLocReferenceError",
	42: "BorrowLocUnavailableError",
	43: "BorrowLocExistsBorrowError",
	44: "CallTypeMismatchError",
	45: "CallBorrowedMutableReferenceError",
	46: "PackTypeMismatchError",
	47: "UnpackTypeMismatchError",
	48: "ReadRefTypeMismatchError",
	49: "ReadRefResourceError",
	50: "ReadRefExistsMutableBorrowError",
	51: "WriteRefTypeMismatchError",
	52: "WriteRefResourceError",
	53: "WriteRefExistsBorrowError",
	54: "WriteRefNoMutableReferenceError",
	55: "IntegerOpTypeMismatchError",
	56: "BooleanOpTypeMismatchError",
	57: "EqualityOpTypeMismatchError",
	58: "ExistsResourceTypeMismatchError",
	59: "BorrowGlobalTypeMismatchError",
	60: "BorrowGlobalNoResourceError",
	61: "MoveFromTypeMismatchError",
	62: "MoveFromNoResourceError",
	63: "MoveToSenderTypeMismatchError",
	64: "MoveToSenderNoResourceError",
	65: "CreateAccountTypeMismatchError",
	66: "ModuleAddressDoesNotMatchSender",
	67: "NoModuleHandles",
}

var VMVerificationErrorKind_value = map[string]int32{
	"UnknownVerificationError":            0,
	"IndexOutOfBounds":                    1,
	"RangeOutOfBounds":                    2,
	"InvalidSignatureToken":               3,
	"InvalidFieldDefReference":            4,
	"RecursiveStructDefinition":           5,
	"InvalidResourceField":                6,
	"InvalidFallThrough":                  7,
	"JoinFailure":                         8,
	"NegativeStackSizeWithinBlock":        9,
	"UnbalancedStack":                     10,
	"InvalidMainFunctionSignature":        11,
	"DuplicateElement":                    12,
	"InvalidModuleHandle":                 13,
	"UnimplementedHandle":                 14,
	"InconsistentFields":                  15,
	"UnusedFields":                        16,
	"LookupFailed":                        17,
	"VisibilityMismatch":                  18,
	"TypeResolutionFailure":               19,
	"TypeMismatch":                        20,
	"MissingDependency":                   21,
	"PopReferenceError":                   22,
	"PopResourceError":                    23,
	"ReleaseRefTypeMismatchError":         24,
	"BrTypeMismatchError":                 25,
	"AssertTypeMismatchError":             26,
	"StLocTypeMismatchError":              27,
	"StLocUnsafeToDestroyError":           28,
	"RetUnsafeToDestroyError":             29,
	"RetTypeMismatchError":                30,
	"FreezeRefTypeMismatchError":          31,
	"FreezeRefExistsMutableBorrowError":   32,
	"BorrowFieldTypeMismatchError":        33,
	"BorrowFieldBadFieldError":            34,
	"BorrowFieldExistsMutableBorrowError": 35,
	"CopyLocUnavailableError":             36,
	"CopyLocResourceError":                37,
	"CopyLocExistsBorrowError":            38,
	"MoveLocUnavailableError":             39,
	"MoveLocExistsBorrowError":            40,
	"BorrowLocReferenceError":             41,
	"BorrowLocUnavailableError":           42,
	"BorrowLocExistsBorrowError":          43,
	"CallTypeMismatchError":               44,
	"CallBorrowedMutableReferenceError":   45,
	"PackTypeMismatchError":               46,
	"UnpackTypeMismatchError":             47,
	"ReadRefTypeMismatchError":            48,
	"ReadRefResourceError":                49,
	"ReadRefExistsMutableBorrowError":     50,
	"WriteRefTypeMismatchError":           51,
	"WriteRefResourceError":               52,
	"WriteRefExistsBorrowError":           53,
	"WriteRefNoMutableReferenceError":     54,
	"IntegerOpTypeMismatchError":          55,
	"BooleanOpTypeMismatchError":          56,
	"EqualityOpTypeMismatchError":         57,
	"ExistsResourceTypeMismatchError":     58,
	"BorrowGlobalTypeMismatchError":       59,
	"BorrowGlobalNoResourceError":         60,
	"MoveFromTypeMismatchError":           61,
	"MoveFromNoResourceError":             62,
	"MoveToSenderTypeMismatchError":       63,
	"MoveToSenderNoResourceError":         64,
	"CreateAccountTypeMismatchError":      65,
	"ModuleAddressDoesNotMatchSender":     66,
	"NoModuleHandles":                     67,
}

func (VMVerificationErrorKind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5824ced5fb3a3c2c, []int{1}
}

// These are errors that the VM might raise if a violation of internal
// invariants takes place.
type VMInvariantViolationError int32

const (
	UnknownInvariantViolationError VMInvariantViolationError = 0
	OutOfBoundsIndex               VMInvariantViolationError = 1
	OutOfBoundsRange               VMInvariantViolationError = 2
	EmptyValueStack                VMInvariantViolationError = 3
	EmptyCallStack                 VMInvariantViolationError = 4
	PCOverflow                     VMInvariantViolationError = 5
	LinkerError                    VMInvariantViolationError = 6
	LocalReferenceError            VMInvariantViolationError = 7
	StorageError                   VMInvariantViolationError = 8
)

var VMInvariantViolationError_name = map[int32]string{
	0: "UnknownInvariantViolationError",
	1: "OutOfBoundsIndex",
	2: "OutOfBoundsRange",
	3: "EmptyValueStack",
	4: "EmptyCallStack",
	5: "PCOverflow",
	6: "LinkerError",
	7: "LocalReferenceError",
	8: "StorageError",
}

var VMInvariantViolationError_value = map[string]int32{
	"UnknownInvariantViolationError": 0,
	"OutOfBoundsIndex":               1,
	"OutOfBoundsRange":               2,
	"EmptyValueStack":                3,
	"EmptyCallStack":                 4,
	"PCOverflow":                     5,
	"LinkerError":                    6,
	"LocalReferenceError":            7,
	"StorageError":                   8,
}

func (VMInvariantViolationError) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5824ced5fb3a3c2c, []int{2}
}

// Errors that can arise from binary decoding (deserialization)
type BinaryError int32

const (
	UnknownBinaryError      BinaryError = 0
	Malformed               BinaryError = 1
	BadMagic                BinaryError = 2
	UnknownVersion          BinaryError = 3
	UnknownTableType        BinaryError = 4
	UnknownSignatureType    BinaryError = 5
	UnknownSerializedType   BinaryError = 6
	UnknownOpcode           BinaryError = 7
	BadHeaderTable          BinaryError = 8
	UnexpectedSignatureType BinaryError = 9
	DuplicateTable          BinaryError = 10
)

var BinaryError_name = map[int32]string{
	0:  "UnknownBinaryError",
	1:  "Malformed",
	2:  "BadMagic",
	3:  "UnknownVersion",
	4:  "UnknownTableType",
	5:  "UnknownSignatureType",
	6:  "UnknownSerializedType",
	7:  "UnknownOpcode",
	8:  "BadHeaderTable",
	9:  "UnexpectedSignatureType",
	10: "DuplicateTable",
}

var BinaryError_value = map[string]int32{
	"UnknownBinaryError":      0,
	"Malformed":               1,
	"BadMagic":                2,
	"UnknownVersion":          3,
	"UnknownTableType":        4,
	"UnknownSignatureType":    5,
	"UnknownSerializedType":   6,
	"UnknownOpcode":           7,
	"BadHeaderTable":          8,
	"UnexpectedSignatureType": 9,
	"DuplicateTable":          10,
}

func (BinaryError) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5824ced5fb3a3c2c, []int{3}
}

type RuntimeStatus int32

const (
	UnknownRuntimeStatus RuntimeStatus = 0
	Executed             RuntimeStatus = 1
	OutOfGas             RuntimeStatus = 2
	// We tried to access a resource that does not exist under the account.
	ResourceDoesNotExist RuntimeStatus = 3
	// We tried to create a resource under an account where that resource
	// already exists.
	ResourceAlreadyExists RuntimeStatus = 4
	// We accessed an account that is evicted.
	EvictedAccountAccess RuntimeStatus = 5
	// We tried to create an account at an address where an account already
	// exists.
	AccountAddressAlreadyExists RuntimeStatus = 6
	TypeError                   RuntimeStatus = 7
	MissingData                 RuntimeStatus = 8
	DataFormatError             RuntimeStatus = 9
	InvalidData                 RuntimeStatus = 10
	RemoteDataError             RuntimeStatus = 11
	CannotWriteExistingResource RuntimeStatus = 12
	ValueSerializationError     RuntimeStatus = 13
	ValueDeserializationError   RuntimeStatus = 14
	// The sender is trying to publish a module named `M`, but the sender's account already contains
	// a module with this name.
	DuplicateModuleName RuntimeStatus = 15
)

var RuntimeStatus_name = map[int32]string{
	0:  "UnknownRuntimeStatus",
	1:  "Executed",
	2:  "OutOfGas",
	3:  "ResourceDoesNotExist",
	4:  "ResourceAlreadyExists",
	5:  "EvictedAccountAccess",
	6:  "AccountAddressAlreadyExists",
	7:  "TypeError",
	8:  "MissingData",
	9:  "DataFormatError",
	10: "InvalidData",
	11: "RemoteDataError",
	12: "CannotWriteExistingResource",
	13: "ValueSerializationError",
	14: "ValueDeserializationError",
	15: "DuplicateModuleName",
}

var RuntimeStatus_value = map[string]int32{
	"UnknownRuntimeStatus":        0,
	"Executed":                    1,
	"OutOfGas":                    2,
	"ResourceDoesNotExist":        3,
	"ResourceAlreadyExists":       4,
	"EvictedAccountAccess":        5,
	"AccountAddressAlreadyExists": 6,
	"TypeError":                   7,
	"MissingData":                 8,
	"DataFormatError":             9,
	"InvalidData":                 10,
	"RemoteDataError":             11,
	"CannotWriteExistingResource": 12,
	"ValueSerializationError":     13,
	"ValueDeserializationError":   14,
	"DuplicateModuleName":         15,
}

func (RuntimeStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5824ced5fb3a3c2c, []int{4}
}

type VMVerificationStatus_StatusKind int32

const (
	SCRIPT     VMVerificationStatus_StatusKind = 0
	MODULE     VMVerificationStatus_StatusKind = 1
	DEPENDENCY VMVerificationStatus_StatusKind = 2
)

var VMVerificationStatus_StatusKind_name = map[int32]string{
	0: "SCRIPT",
	1: "MODULE",
	2: "DEPENDENCY",
}

var VMVerificationStatus_StatusKind_value = map[string]int32{
	"SCRIPT":     0,
	"MODULE":     1,
	"DEPENDENCY": 2,
}

func (VMVerificationStatus_StatusKind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5824ced5fb3a3c2c, []int{2, 0}
}

type ArithmeticError_ArithmeticErrorType int32

const (
	UnknownArithmeticError ArithmeticError_ArithmeticErrorType = 0
	Underflow              ArithmeticError_ArithmeticErrorType = 1
	Overflow               ArithmeticError_ArithmeticErrorType = 2
	DivisionByZero         ArithmeticError_ArithmeticErrorType = 3
)

var ArithmeticError_ArithmeticErrorType_name = map[int32]string{
	0: "UnknownArithmeticError",
	1: "Underflow",
	2: "Overflow",
	3: "DivisionByZero",
}

var ArithmeticError_ArithmeticErrorType_value = map[string]int32{
	"UnknownArithmeticError": 0,
	"Underflow":              1,
	"Overflow":               2,
	"DivisionByZero":         3,
}

func (ArithmeticError_ArithmeticErrorType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5824ced5fb3a3c2c, []int{4, 0}
}

type DynamicReferenceError_DynamicReferenceErrorType int32

const (
	UnknownDynamicReferenceError DynamicReferenceError_DynamicReferenceErrorType = 0
	MoveOfBorrowedResource       DynamicReferenceError_DynamicReferenceErrorType = 1
	GlobalRefAlreadyReleased     DynamicReferenceError_DynamicReferenceErrorType = 2
	MissingReleaseRef            DynamicReferenceError_DynamicReferenceErrorType = 3
	GlobalAlreadyBorrowed        DynamicReferenceError_DynamicReferenceErrorType = 4
)

var DynamicReferenceError_DynamicReferenceErrorType_name = map[int32]string{
	0: "UnknownDynamicReferenceError",
	1: "MoveOfBorrowedResource",
	2: "GlobalRefAlreadyReleased",
	3: "MissingReleaseRef",
	4: "GlobalAlreadyBorrowed",
}

var DynamicReferenceError_DynamicReferenceErrorType_value = map[string]int32{
	"UnknownDynamicReferenceError": 0,
	"MoveOfBorrowedResource":       1,
	"GlobalRefAlreadyReleased":     2,
	"MissingReleaseRef":            3,
	"GlobalAlreadyBorrowed":        4,
}

func (DynamicReferenceError_DynamicReferenceErrorType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5824ced5fb3a3c2c, []int{5, 0}
}

type VMValidationStatus struct {
	Code    VMValidationStatusCode `protobuf:"varint,1,opt,name=code,proto3,enum=types.VMValidationStatusCode" json:"code,omitempty"`
	Message string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *VMValidationStatus) Reset()      { *m = VMValidationStatus{} }
func (*VMValidationStatus) ProtoMessage() {}
func (*VMValidationStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_5824ced5fb3a3c2c, []int{0}
}
func (m *VMValidationStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VMValidationStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VMValidationStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VMValidationStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VMValidationStatus.Merge(m, src)
}
func (m *VMValidationStatus) XXX_Size() int {
	return m.Size()
}
func (m *VMValidationStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_VMValidationStatus.DiscardUnknown(m)
}

var xxx_messageInfo_VMValidationStatus proto.InternalMessageInfo

func (m *VMValidationStatus) GetCode() VMValidationStatusCode {
	if m != nil {
		return m.Code
	}
	return UnknownValidationStatus
}

func (m *VMValidationStatus) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type VMVerificationStatusList struct {
	StatusList []*VMVerificationStatus `protobuf:"bytes,1,rep,name=status_list,json=statusList,proto3" json:"status_list,omitempty"`
}

func (m *VMVerificationStatusList) Reset()      { *m = VMVerificationStatusList{} }
func (*VMVerificationStatusList) ProtoMessage() {}
func (*VMVerificationStatusList) Descriptor() ([]byte, []int) {
	return fileDescriptor_5824ced5fb3a3c2c, []int{1}
}
func (m *VMVerificationStatusList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VMVerificationStatusList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VMVerificationStatusList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VMVerificationStatusList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VMVerificationStatusList.Merge(m, src)
}
func (m *VMVerificationStatusList) XXX_Size() int {
	return m.Size()
}
func (m *VMVerificationStatusList) XXX_DiscardUnknown() {
	xxx_messageInfo_VMVerificationStatusList.DiscardUnknown(m)
}

var xxx_messageInfo_VMVerificationStatusList proto.InternalMessageInfo

func (m *VMVerificationStatusList) GetStatusList() []*VMVerificationStatus {
	if m != nil {
		return m.StatusList
	}
	return nil
}

type VMVerificationStatus struct {
	StatusKind VMVerificationStatus_StatusKind `protobuf:"varint,1,opt,name=status_kind,json=statusKind,proto3,enum=types.VMVerificationStatus_StatusKind" json:"status_kind,omitempty"`
	// For StatusKind::SCRIPT and DEPENDENCY this is ignored.
	ModuleIdx uint32                  `protobuf:"varint,2,opt,name=module_idx,json=moduleIdx,proto3" json:"module_idx,omitempty"`
	ErrorKind VMVerificationErrorKind `protobuf:"varint,3,opt,name=error_kind,json=errorKind,proto3,enum=types.VMVerificationErrorKind" json:"error_kind,omitempty"`
	Message   string                  `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	// For StatusKind::SCRIPT and MODULE this is ignored.
	DependencyId *ModuleId `protobuf:"bytes,5,opt,name=dependency_id,json=dependencyId,proto3" json:"dependency_id,omitempty"`
}

func (m *VMVerificationStatus) Reset()      { *m = VMVerificationStatus{} }
func (*VMVerificationStatus) ProtoMessage() {}
func (*VMVerificationStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_5824ced5fb3a3c2c, []int{2}
}
func (m *VMVerificationStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VMVerificationStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VMVerificationStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VMVerificationStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VMVerificationStatus.Merge(m, src)
}
func (m *VMVerificationStatus) XXX_Size() int {
	return m.Size()
}
func (m *VMVerificationStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_VMVerificationStatus.DiscardUnknown(m)
}

var xxx_messageInfo_VMVerificationStatus proto.InternalMessageInfo

func (m *VMVerificationStatus) GetStatusKind() VMVerificationStatus_StatusKind {
	if m != nil {
		return m.StatusKind
	}
	return SCRIPT
}

func (m *VMVerificationStatus) GetModuleIdx() uint32 {
	if m != nil {
		return m.ModuleIdx
	}
	return 0
}

func (m *VMVerificationStatus) GetErrorKind() VMVerificationErrorKind {
	if m != nil {
		return m.ErrorKind
	}
	return UnknownVerificationError
}

func (m *VMVerificationStatus) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *VMVerificationStatus) GetDependencyId() *ModuleId {
	if m != nil {
		return m.DependencyId
	}
	return nil
}

// user-defined assertion error code number
type AssertionFailure struct {
	AssertionErrorCode uint64 `protobuf:"varint,1,opt,name=assertion_error_code,json=assertionErrorCode,proto3" json:"assertion_error_code,omitempty"`
}

func (m *AssertionFailure) Reset()      { *m = AssertionFailure{} }
func (*AssertionFailure) ProtoMessage() {}
func (*AssertionFailure) Descriptor() ([]byte, []int) {
	return fileDescriptor_5824ced5fb3a3c2c, []int{3}
}
func (m *AssertionFailure) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssertionFailure) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssertionFailure.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssertionFailure) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssertionFailure.Merge(m, src)
}
func (m *AssertionFailure) XXX_Size() int {
	return m.Size()
}
func (m *AssertionFailure) XXX_DiscardUnknown() {
	xxx_messageInfo_AssertionFailure.DiscardUnknown(m)
}

var xxx_messageInfo_AssertionFailure proto.InternalMessageInfo

func (m *AssertionFailure) GetAssertionErrorCode() uint64 {
	if m != nil {
		return m.AssertionErrorCode
	}
	return 0
}

type ArithmeticError struct {
	ErrorCode ArithmeticError_ArithmeticErrorType `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3,enum=types.ArithmeticError_ArithmeticErrorType" json:"error_code,omitempty"`
}

func (m *ArithmeticError) Reset()      { *m = ArithmeticError{} }
func (*ArithmeticError) ProtoMessage() {}
func (*ArithmeticError) Descriptor() ([]byte, []int) {
	return fileDescriptor_5824ced5fb3a3c2c, []int{4}
}
func (m *ArithmeticError) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArithmeticError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArithmeticError.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArithmeticError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArithmeticError.Merge(m, src)
}
func (m *ArithmeticError) XXX_Size() int {
	return m.Size()
}
func (m *ArithmeticError) XXX_DiscardUnknown() {
	xxx_messageInfo_ArithmeticError.DiscardUnknown(m)
}

var xxx_messageInfo_ArithmeticError proto.InternalMessageInfo

func (m *ArithmeticError) GetErrorCode() ArithmeticError_ArithmeticErrorType {
	if m != nil {
		return m.ErrorCode
	}
	return UnknownArithmeticError
}

type DynamicReferenceError struct {
	ErrorCode DynamicReferenceError_DynamicReferenceErrorType `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3,enum=types.DynamicReferenceError_DynamicReferenceErrorType" json:"error_code,omitempty"`
}

func (m *DynamicReferenceError) Reset()      { *m = DynamicReferenceError{} }
func (*DynamicReferenceError) ProtoMessage() {}
func (*DynamicReferenceError) Descriptor() ([]byte, []int) {
	return fileDescriptor_5824ced5fb3a3c2c, []int{5}
}
func (m *DynamicReferenceError) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DynamicReferenceError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DynamicReferenceError.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DynamicReferenceError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DynamicReferenceError.Merge(m, src)
}
func (m *DynamicReferenceError) XXX_Size() int {
	return m.Size()
}
func (m *DynamicReferenceError) XXX_DiscardUnknown() {
	xxx_messageInfo_DynamicReferenceError.DiscardUnknown(m)
}

var xxx_messageInfo_DynamicReferenceError proto.InternalMessageInfo

func (m *DynamicReferenceError) GetErrorCode() DynamicReferenceError_DynamicReferenceErrorType {
	if m != nil {
		return m.ErrorCode
	}
	return UnknownDynamicReferenceError
}

type ExecutionStatus struct {
	// Types that are valid to be assigned to ExecutionStatus:
	//	*ExecutionStatus_RuntimeStatus
	//	*ExecutionStatus_AssertionFailure
	//	*ExecutionStatus_ArithmeticError
	//	*ExecutionStatus_ReferenceError
	ExecutionStatus isExecutionStatus_ExecutionStatus `protobuf_oneof:"execution_status"`
}

func (m *ExecutionStatus) Reset()      { *m = ExecutionStatus{} }
func (*ExecutionStatus) ProtoMessage() {}
func (*ExecutionStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_5824ced5fb3a3c2c, []int{6}
}
func (m *ExecutionStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecutionStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExecutionStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExecutionStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecutionStatus.Merge(m, src)
}
func (m *ExecutionStatus) XXX_Size() int {
	return m.Size()
}
func (m *ExecutionStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecutionStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ExecutionStatus proto.InternalMessageInfo

type isExecutionStatus_ExecutionStatus interface {
	isExecutionStatus_ExecutionStatus()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ExecutionStatus_RuntimeStatus struct {
	RuntimeStatus RuntimeStatus `protobuf:"varint,1,opt,name=runtime_status,json=runtimeStatus,proto3,enum=types.RuntimeStatus,oneof"`
}
type ExecutionStatus_AssertionFailure struct {
	AssertionFailure *AssertionFailure `protobuf:"bytes,2,opt,name=assertion_failure,json=assertionFailure,proto3,oneof"`
}
type ExecutionStatus_ArithmeticError struct {
	ArithmeticError *ArithmeticError `protobuf:"bytes,3,opt,name=arithmetic_error,json=arithmeticError,proto3,oneof"`
}
type ExecutionStatus_ReferenceError struct {
	ReferenceError *DynamicReferenceError `protobuf:"bytes,4,opt,name=reference_error,json=referenceError,proto3,oneof"`
}

func (*ExecutionStatus_RuntimeStatus) isExecutionStatus_ExecutionStatus()    {}
func (*ExecutionStatus_AssertionFailure) isExecutionStatus_ExecutionStatus() {}
func (*ExecutionStatus_ArithmeticError) isExecutionStatus_ExecutionStatus()  {}
func (*ExecutionStatus_ReferenceError) isExecutionStatus_ExecutionStatus()   {}

func (m *ExecutionStatus) GetExecutionStatus() isExecutionStatus_ExecutionStatus {
	if m != nil {
		return m.ExecutionStatus
	}
	return nil
}

func (m *ExecutionStatus) GetRuntimeStatus() RuntimeStatus {
	if x, ok := m.GetExecutionStatus().(*ExecutionStatus_RuntimeStatus); ok {
		return x.RuntimeStatus
	}
	return UnknownRuntimeStatus
}

func (m *ExecutionStatus) GetAssertionFailure() *AssertionFailure {
	if x, ok := m.GetExecutionStatus().(*ExecutionStatus_AssertionFailure); ok {
		return x.AssertionFailure
	}
	return nil
}

func (m *ExecutionStatus) GetArithmeticError() *ArithmeticError {
	if x, ok := m.GetExecutionStatus().(*ExecutionStatus_ArithmeticError); ok {
		return x.ArithmeticError
	}
	return nil
}

func (m *ExecutionStatus) GetReferenceError() *DynamicReferenceError {
	if x, ok := m.GetExecutionStatus().(*ExecutionStatus_ReferenceError); ok {
		return x.ReferenceError
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ExecutionStatus) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ExecutionStatus_OneofMarshaler, _ExecutionStatus_OneofUnmarshaler, _ExecutionStatus_OneofSizer, []interface{}{
		(*ExecutionStatus_RuntimeStatus)(nil),
		(*ExecutionStatus_AssertionFailure)(nil),
		(*ExecutionStatus_ArithmeticError)(nil),
		(*ExecutionStatus_ReferenceError)(nil),
	}
}

func _ExecutionStatus_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ExecutionStatus)
	// execution_status
	switch x := m.ExecutionStatus.(type) {
	case *ExecutionStatus_RuntimeStatus:
		_ = b.EncodeVarint(1<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.RuntimeStatus))
	case *ExecutionStatus_AssertionFailure:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AssertionFailure); err != nil {
			return err
		}
	case *ExecutionStatus_ArithmeticError:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ArithmeticError); err != nil {
			return err
		}
	case *ExecutionStatus_ReferenceError:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ReferenceError); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ExecutionStatus.ExecutionStatus has unexpected type %T", x)
	}
	return nil
}

func _ExecutionStatus_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ExecutionStatus)
	switch tag {
	case 1: // execution_status.runtime_status
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.ExecutionStatus = &ExecutionStatus_RuntimeStatus{RuntimeStatus(x)}
		return true, err
	case 2: // execution_status.assertion_failure
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AssertionFailure)
		err := b.DecodeMessage(msg)
		m.ExecutionStatus = &ExecutionStatus_AssertionFailure{msg}
		return true, err
	case 3: // execution_status.arithmetic_error
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ArithmeticError)
		err := b.DecodeMessage(msg)
		m.ExecutionStatus = &ExecutionStatus_ArithmeticError{msg}
		return true, err
	case 4: // execution_status.reference_error
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DynamicReferenceError)
		err := b.DecodeMessage(msg)
		m.ExecutionStatus = &ExecutionStatus_ReferenceError{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ExecutionStatus_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ExecutionStatus)
	// execution_status
	switch x := m.ExecutionStatus.(type) {
	case *ExecutionStatus_RuntimeStatus:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.RuntimeStatus))
	case *ExecutionStatus_AssertionFailure:
		s := proto.Size(x.AssertionFailure)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecutionStatus_ArithmeticError:
		s := proto.Size(x.ArithmeticError)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecutionStatus_ReferenceError:
		s := proto.Size(x.ReferenceError)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// The status of the VM
type VMStatus struct {
	// Types that are valid to be assigned to ErrorType:
	//	*VMStatus_Validation
	//	*VMStatus_Verification
	//	*VMStatus_InvariantViolation
	//	*VMStatus_Deserialization
	//	*VMStatus_Execution
	ErrorType isVMStatus_ErrorType `protobuf_oneof:"error_type"`
}

func (m *VMStatus) Reset()      { *m = VMStatus{} }
func (*VMStatus) ProtoMessage() {}
func (*VMStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_5824ced5fb3a3c2c, []int{7}
}
func (m *VMStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VMStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VMStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VMStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VMStatus.Merge(m, src)
}
func (m *VMStatus) XXX_Size() int {
	return m.Size()
}
func (m *VMStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_VMStatus.DiscardUnknown(m)
}

var xxx_messageInfo_VMStatus proto.InternalMessageInfo

type isVMStatus_ErrorType interface {
	isVMStatus_ErrorType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type VMStatus_Validation struct {
	Validation *VMValidationStatus `protobuf:"bytes,1,opt,name=validation,proto3,oneof"`
}
type VMStatus_Verification struct {
	Verification *VMVerificationStatusList `protobuf:"bytes,2,opt,name=verification,proto3,oneof"`
}
type VMStatus_InvariantViolation struct {
	InvariantViolation VMInvariantViolationError `protobuf:"varint,3,opt,name=invariant_violation,json=invariantViolation,proto3,enum=types.VMInvariantViolationError,oneof"`
}
type VMStatus_Deserialization struct {
	Deserialization BinaryError `protobuf:"varint,4,opt,name=deserialization,proto3,enum=types.BinaryError,oneof"`
}
type VMStatus_Execution struct {
	Execution *ExecutionStatus `protobuf:"bytes,5,opt,name=execution,proto3,oneof"`
}

func (*VMStatus_Validation) isVMStatus_ErrorType()         {}
func (*VMStatus_Verification) isVMStatus_ErrorType()       {}
func (*VMStatus_InvariantViolation) isVMStatus_ErrorType() {}
func (*VMStatus_Deserialization) isVMStatus_ErrorType()    {}
func (*VMStatus_Execution) isVMStatus_ErrorType()          {}

func (m *VMStatus) GetErrorType() isVMStatus_ErrorType {
	if m != nil {
		return m.ErrorType
	}
	return nil
}

func (m *VMStatus) GetValidation() *VMValidationStatus {
	if x, ok := m.GetErrorType().(*VMStatus_Validation); ok {
		return x.Validation
	}
	return nil
}

func (m *VMStatus) GetVerification() *VMVerificationStatusList {
	if x, ok := m.GetErrorType().(*VMStatus_Verification); ok {
		return x.Verification
	}
	return nil
}

func (m *VMStatus) GetInvariantViolation() VMInvariantViolationError {
	if x, ok := m.GetErrorType().(*VMStatus_InvariantViolation); ok {
		return x.InvariantViolation
	}
	return UnknownInvariantViolationError
}

func (m *VMStatus) GetDeserialization() BinaryError {
	if x, ok := m.GetErrorType().(*VMStatus_Deserialization); ok {
		return x.Deserialization
	}
	return UnknownBinaryError
}

func (m *VMStatus) GetExecution() *ExecutionStatus {
	if x, ok := m.GetErrorType().(*VMStatus_Execution); ok {
		return x.Execution
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*VMStatus) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _VMStatus_OneofMarshaler, _VMStatus_OneofUnmarshaler, _VMStatus_OneofSizer, []interface{}{
		(*VMStatus_Validation)(nil),
		(*VMStatus_Verification)(nil),
		(*VMStatus_InvariantViolation)(nil),
		(*VMStatus_Deserialization)(nil),
		(*VMStatus_Execution)(nil),
	}
}

func _VMStatus_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*VMStatus)
	// error_type
	switch x := m.ErrorType.(type) {
	case *VMStatus_Validation:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Validation); err != nil {
			return err
		}
	case *VMStatus_Verification:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Verification); err != nil {
			return err
		}
	case *VMStatus_InvariantViolation:
		_ = b.EncodeVarint(3<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.InvariantViolation))
	case *VMStatus_Deserialization:
		_ = b.EncodeVarint(4<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.Deserialization))
	case *VMStatus_Execution:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Execution); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("VMStatus.ErrorType has unexpected type %T", x)
	}
	return nil
}

func _VMStatus_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*VMStatus)
	switch tag {
	case 1: // error_type.validation
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(VMValidationStatus)
		err := b.DecodeMessage(msg)
		m.ErrorType = &VMStatus_Validation{msg}
		return true, err
	case 2: // error_type.verification
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(VMVerificationStatusList)
		err := b.DecodeMessage(msg)
		m.ErrorType = &VMStatus_Verification{msg}
		return true, err
	case 3: // error_type.invariant_violation
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.ErrorType = &VMStatus_InvariantViolation{VMInvariantViolationError(x)}
		return true, err
	case 4: // error_type.deserialization
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.ErrorType = &VMStatus_Deserialization{BinaryError(x)}
		return true, err
	case 5: // error_type.execution
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ExecutionStatus)
		err := b.DecodeMessage(msg)
		m.ErrorType = &VMStatus_Execution{msg}
		return true, err
	default:
		return false, nil
	}
}

func _VMStatus_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*VMStatus)
	// error_type
	switch x := m.ErrorType.(type) {
	case *VMStatus_Validation:
		s := proto.Size(x.Validation)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *VMStatus_Verification:
		s := proto.Size(x.Verification)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *VMStatus_InvariantViolation:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.InvariantViolation))
	case *VMStatus_Deserialization:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.Deserialization))
	case *VMStatus_Execution:
		s := proto.Size(x.Execution)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterEnum("types.VMValidationStatusCode", VMValidationStatusCode_name, VMValidationStatusCode_value)
	proto.RegisterEnum("types.VMVerificationErrorKind", VMVerificationErrorKind_name, VMVerificationErrorKind_value)
	proto.RegisterEnum("types.VMInvariantViolationError", VMInvariantViolationError_name, VMInvariantViolationError_value)
	proto.RegisterEnum("types.BinaryError", BinaryError_name, BinaryError_value)
	proto.RegisterEnum("types.RuntimeStatus", RuntimeStatus_name, RuntimeStatus_value)
	proto.RegisterEnum("types.VMVerificationStatus_StatusKind", VMVerificationStatus_StatusKind_name, VMVerificationStatus_StatusKind_value)
	proto.RegisterEnum("types.ArithmeticError_ArithmeticErrorType", ArithmeticError_ArithmeticErrorType_name, ArithmeticError_ArithmeticErrorType_value)
	proto.RegisterEnum("types.DynamicReferenceError_DynamicReferenceErrorType", DynamicReferenceError_DynamicReferenceErrorType_name, DynamicReferenceError_DynamicReferenceErrorType_value)
	proto.RegisterType((*VMValidationStatus)(nil), "types.VMValidationStatus")
	proto.RegisterType((*VMVerificationStatusList)(nil), "types.VMVerificationStatusList")
	proto.RegisterType((*VMVerificationStatus)(nil), "types.VMVerificationStatus")
	proto.RegisterType((*AssertionFailure)(nil), "types.AssertionFailure")
	proto.RegisterType((*ArithmeticError)(nil), "types.ArithmeticError")
	proto.RegisterType((*DynamicReferenceError)(nil), "types.DynamicReferenceError")
	proto.RegisterType((*ExecutionStatus)(nil), "types.ExecutionStatus")
	proto.RegisterType((*VMStatus)(nil), "types.VMStatus")
}

func init() { proto.RegisterFile("vm_errors.proto", fileDescriptor_5824ced5fb3a3c2c) }

var fileDescriptor_5824ced5fb3a3c2c = []byte{
	// 2203 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x58, 0x4b, 0x57, 0x1b, 0xc9,
	0x15, 0x96, 0xc4, 0xc3, 0x50, 0x02, 0x54, 0x2e, 0x63, 0x0c, 0x7e, 0xc8, 0x58, 0x9e, 0xf1, 0x10,
	0x92, 0x38, 0x33, 0x8c, 0xe3, 0x3c, 0x66, 0x3c, 0x09, 0x42, 0xc2, 0x90, 0x41, 0xc0, 0x69, 0x01,
	0x93, 0x64, 0xc3, 0x29, 0xba, 0xaf, 0x44, 0x85, 0x56, 0x95, 0xa6, 0x1f, 0xb2, 0xe4, 0x55, 0x56,
	0x59, 0x67, 0x9d, 0x5f, 0x90, 0xfc, 0x85, 0xac, 0x72, 0x4e, 0xce, 0xc9, 0xc9, 0xd2, 0xcb, 0x59,
	0x8e, 0xf1, 0x26, 0xd9, 0xcd, 0x32, 0xd9, 0xcd, 0xb9, 0x55, 0xd5, 0xa2, 0xf5, 0xc0, 0x2b, 0xd4,
	0xf7, 0xbb, 0x8f, 0xba, 0x8f, 0xba, 0xf7, 0x16, 0xa4, 0xd0, 0x69, 0x9d, 0x42, 0x10, 0xa8, 0x20,
	0x7c, 0xda, 0x0e, 0x54, 0xa4, 0xd8, 0x54, 0xd4, 0x6b, 0x43, 0x78, 0x77, 0xc9, 0xe7, 0xb2, 0x19,
	0xf3, 0x26, 0x9c, 0x86, 0x91, 0x0a, 0x78, 0x13, 0x0c, 0x5c, 0xe2, 0x84, 0x9d, 0xd4, 0x4e, 0xb8,
	0x2f, 0x3c, 0x1e, 0x09, 0x25, 0xeb, 0x11, 0x8f, 0xe2, 0x90, 0x7d, 0x42, 0x26, 0x5d, 0xe5, 0xc1,
	0x72, 0x76, 0x35, 0xbb, 0xb6, 0xb0, 0xf1, 0xe0, 0xa9, 0xd6, 0xf1, 0x74, 0x94, 0x71, 0x4b, 0x79,
	0xe0, 0x68, 0x56, 0xb6, 0x4c, 0x6e, 0xb4, 0x20, 0x0c, 0x79, 0x13, 0x96, 0x73, 0xab, 0xd9, 0xb5,
	0x59, 0x27, 0xf9, 0x2c, 0xfd, 0x96, 0x2c, 0x9f, 0xd4, 0x4e, 0x20, 0x10, 0x0d, 0xe1, 0xa6, 0x64,
	0xf7, 0x44, 0x18, 0xb1, 0xcf, 0x49, 0x3e, 0xd4, 0x5f, 0xa7, 0xbe, 0x08, 0xa3, 0xe5, 0xec, 0xea,
	0xc4, 0x5a, 0x7e, 0xe3, 0xde, 0x95, 0xbd, 0x11, 0x29, 0x87, 0x84, 0x7d, 0xe9, 0xd2, 0x3f, 0x73,
	0x64, 0x71, 0x1c, 0x13, 0x7b, 0xd9, 0x57, 0x7b, 0x21, 0xa4, 0x67, 0xdd, 0x78, 0xf2, 0x1e, 0xb5,
	0x4f, 0xcd, 0x9f, 0x2f, 0x85, 0xf4, 0x12, 0x0b, 0xf8, 0x9b, 0x3d, 0x20, 0xa4, 0xa5, 0xbc, 0xd8,
	0x87, 0x53, 0xe1, 0x75, 0xb5, 0x63, 0xf3, 0xce, 0xac, 0xa1, 0xec, 0x7a, 0x5d, 0xf6, 0x82, 0x10,
	0x1d, 0x6c, 0x63, 0x66, 0x42, 0x9b, 0x29, 0x8e, 0x35, 0x53, 0x45, 0x36, 0xad, 0x7e, 0x16, 0x92,
	0x9f, 0xe9, 0x98, 0x4d, 0x0e, 0xc4, 0x8c, 0x3d, 0x23, 0xf3, 0x1e, 0xb4, 0x41, 0x7a, 0x20, 0xdd,
	0xde, 0xa9, 0xf0, 0x96, 0xa7, 0x56, 0xb3, 0x6b, 0xf9, 0x8d, 0x82, 0xd5, 0x5d, 0xb3, 0x27, 0x70,
	0xe6, 0xae, 0xb8, 0x76, 0xbd, 0xd2, 0x33, 0x42, 0xae, 0xfc, 0x60, 0x84, 0x4c, 0xd7, 0xb7, 0x9c,
	0xdd, 0xc3, 0x23, 0x9a, 0xc1, 0xdf, 0xb5, 0x83, 0xca, 0xf1, 0x5e, 0x95, 0x66, 0xd9, 0x02, 0x21,
	0x95, 0xea, 0x61, 0x75, 0xbf, 0x52, 0xdd, 0xdf, 0xfa, 0x1d, 0xcd, 0x95, 0x2a, 0x84, 0x6e, 0x86,
	0x21, 0x04, 0x78, 0xcc, 0x6d, 0x2e, 0xfc, 0x38, 0x00, 0xf6, 0x31, 0x59, 0xe4, 0x09, 0xcd, 0xd4,
	0xd3, 0x69, 0xbf, 0x20, 0x26, 0x1d, 0xd6, 0xc7, 0xb4, 0x5b, 0x58, 0x05, 0xa5, 0x7f, 0x64, 0x49,
	0x61, 0x33, 0x10, 0xd1, 0x79, 0x0b, 0x22, 0xe1, 0x6a, 0x3a, 0xdb, 0x4d, 0xc2, 0x93, 0x2a, 0xa6,
	0x75, 0xeb, 0xc2, 0x10, 0xef, 0xf0, 0xf7, 0x51, 0xaf, 0x0d, 0x36, 0x54, 0x5a, 0xfd, 0x19, 0xb9,
	0x35, 0x86, 0x83, 0xdd, 0x25, 0x4b, 0xc7, 0xf2, 0x42, 0xaa, 0x57, 0x72, 0x08, 0xa5, 0x19, 0x36,
	0x4f, 0x66, 0x8f, 0xa5, 0x07, 0x41, 0xc3, 0x57, 0xaf, 0x68, 0x96, 0xcd, 0x91, 0x99, 0x83, 0x8e,
	0xfd, 0xca, 0x31, 0x46, 0x16, 0x2a, 0xa2, 0x23, 0x42, 0xa1, 0x64, 0xb9, 0xf7, 0x7b, 0x08, 0x14,
	0x9d, 0x28, 0xfd, 0x25, 0x47, 0x6e, 0x57, 0x7a, 0x92, 0xb7, 0x84, 0xeb, 0x40, 0x03, 0x02, 0x90,
	0x2e, 0x18, 0x47, 0x8e, 0xc7, 0x38, 0xf2, 0xdc, 0x3a, 0x32, 0x56, 0x62, 0x3c, 0x75, 0xd8, 0xa9,
	0xbf, 0x65, 0xc9, 0xca, 0xb5, 0x8c, 0x6c, 0x95, 0xdc, 0xb7, 0xbe, 0x8d, 0xe5, 0xa1, 0x19, 0xf4,
	0xbe, 0xa6, 0x3a, 0x70, 0xd0, 0x28, 0xab, 0x20, 0x50, 0xaf, 0xc0, 0x73, 0x20, 0x54, 0x71, 0xe0,
	0x02, 0xcd, 0xb2, 0xfb, 0x64, 0xf9, 0xa5, 0xaf, 0xce, 0xb8, 0xef, 0x40, 0x63, 0xd3, 0x0f, 0x80,
	0x7b, 0x3d, 0x07, 0x7c, 0xe0, 0x21, 0x78, 0x34, 0xc7, 0x6e, 0x93, 0x9b, 0x35, 0x11, 0x86, 0x42,
	0x36, 0x2d, 0xd1, 0x81, 0x06, 0x9d, 0x60, 0x2b, 0xe4, 0xb6, 0x11, 0xb2, 0x12, 0x89, 0x5e, 0x3a,
	0x59, 0xfa, 0x7b, 0x8e, 0x14, 0xaa, 0x5d, 0x70, 0xe3, 0xd4, 0x35, 0x7b, 0x41, 0x16, 0x82, 0x58,
	0x46, 0xa2, 0x85, 0x5d, 0x05, 0x29, 0x36, 0x34, 0x8b, 0x36, 0x34, 0x8e, 0x01, 0x0d, 0xf7, 0x4e,
	0xc6, 0x99, 0x0f, 0xd2, 0x04, 0xb6, 0x4d, 0x6e, 0x5e, 0x15, 0x59, 0xc3, 0x54, 0x9e, 0xbe, 0x63,
	0xf9, 0x8d, 0x3b, 0x49, 0x95, 0x0c, 0x15, 0xe6, 0x4e, 0xc6, 0xa1, 0x7c, 0xb8, 0x58, 0xb7, 0x08,
	0xe5, 0xfd, 0xec, 0x9b, 0x6a, 0xd5, 0x77, 0x31, 0xbf, 0xb1, 0x34, 0xbe, 0xd8, 0x76, 0x32, 0x4e,
	0x81, 0x0f, 0xd5, 0xea, 0x4b, 0x52, 0x08, 0x92, 0xf8, 0x5a, 0x1d, 0x93, 0x5a, 0xc7, 0xfd, 0xf7,
	0xe5, 0x79, 0x27, 0xe3, 0x2c, 0x04, 0x03, 0x94, 0x32, 0x23, 0x14, 0x92, 0x38, 0xd9, 0xb0, 0x94,
	0xfe, 0x9b, 0x23, 0x33, 0x27, 0x35, 0xeb, 0xf6, 0x67, 0x84, 0x74, 0xfa, 0x7d, 0x54, 0x47, 0x2c,
	0xbf, 0xb1, 0x72, 0x6d, 0x8b, 0xdd, 0xc9, 0x38, 0x29, 0x76, 0x56, 0x25, 0x73, 0x9d, 0x54, 0x5b,
	0xb1, 0xe1, 0x7a, 0xf8, 0x9e, 0xd6, 0x86, 0x9d, 0x72, 0x27, 0xe3, 0x0c, 0x88, 0xb1, 0x3a, 0xb9,
	0x25, 0x64, 0x87, 0x07, 0x82, 0xcb, 0xe8, 0xb4, 0x23, 0x94, 0x6f, 0xb4, 0x99, 0x0e, 0xb6, 0xda,
	0xd7, 0xb6, 0x9b, 0xf0, 0x9c, 0x24, 0x2c, 0x89, 0xd7, 0x4c, 0x8c, 0x40, 0xec, 0x0b, 0x52, 0xf0,
	0x20, 0x84, 0x40, 0x70, 0x5f, 0xbc, 0x36, 0x0a, 0x27, 0xb5, 0x42, 0x66, 0x15, 0x96, 0x85, 0xe4,
	0x41, 0xaf, 0x9f, 0x82, 0x21, 0x66, 0xf6, 0x9c, 0xcc, 0xf6, 0x23, 0x67, 0x1b, 0x5e, 0x92, 0xc0,
	0xa1, 0xca, 0xdb, 0xc9, 0x38, 0x57, 0xac, 0xe5, 0xb9, 0xe4, 0x76, 0x22, 0xef, 0xfa, 0xff, 0x26,
	0xc8, 0xd2, 0xf8, 0x49, 0xc5, 0xee, 0x91, 0x3b, 0xf6, 0x46, 0x0d, 0xc3, 0x34, 0xc3, 0x16, 0x09,
	0x45, 0x77, 0x7d, 0xe1, 0xd5, 0x45, 0x53, 0xf2, 0x28, 0x0e, 0xf0, 0x1a, 0x31, 0xb2, 0x60, 0xa9,
	0x9b, 0x71, 0x74, 0xfe, 0x25, 0xf4, 0x68, 0x8e, 0x2d, 0x93, 0xc5, 0x3a, 0x7c, 0x1d, 0x63, 0xca,
	0xf7, 0xe3, 0xd6, 0x19, 0x04, 0x47, 0x4a, 0x1d, 0xf8, 0x1e, 0x9d, 0x18, 0x8b, 0xec, 0xc3, 0x2b,
	0x3a, 0xc9, 0xd6, 0xc8, 0x07, 0xbb, 0x32, 0x8c, 0x1b, 0x0d, 0xe1, 0x0a, 0x90, 0x51, 0x99, 0xfb,
	0x5c, 0xba, 0xb0, 0xad, 0x82, 0xa3, 0x80, 0xcb, 0x90, 0xbb, 0xba, 0x9e, 0x01, 0xe8, 0x14, 0x5b,
	0x22, 0x2c, 0x45, 0xab, 0x76, 0xdb, 0x22, 0x00, 0x8f, 0x4e, 0xb3, 0x22, 0xb9, 0x5b, 0x07, 0xe9,
	0x09, 0xd9, 0xdc, 0x74, 0x5d, 0x15, 0xcb, 0xa8, 0xa2, 0x20, 0xdc, 0x57, 0x51, 0xb5, 0x2b, 0xc2,
	0x88, 0xde, 0xc0, 0xf3, 0x3b, 0xf0, 0x07, 0x70, 0x23, 0xf0, 0xbe, 0x0a, 0x44, 0x04, 0x75, 0x88,
	0xe8, 0x0c, 0xbb, 0x45, 0x0a, 0xf6, 0xfc, 0x7d, 0xe2, 0x2c, 0xaa, 0xaa, 0x76, 0x5d, 0x00, 0x0f,
	0xbc, 0x1a, 0xef, 0xa6, 0xac, 0xd5, 0xc5, 0x6b, 0xa0, 0x84, 0xdd, 0x24, 0xf3, 0x36, 0x4e, 0x75,
	0x37, 0x10, 0xed, 0x88, 0xe6, 0x53, 0x24, 0x33, 0x7b, 0xe8, 0x1c, 0x7b, 0x42, 0x4a, 0x35, 0xde,
	0x7d, 0xc9, 0xc3, 0x63, 0x29, 0xa2, 0xd0, 0x28, 0x0c, 0x53, 0x94, 0xb2, 0x8a, 0xa5, 0x47, 0xe7,
	0xd9, 0x3a, 0x79, 0x92, 0xa6, 0x82, 0xaf, 0x5e, 0xd5, 0x84, 0x4c, 0x59, 0x4d, 0x20, 0xba, 0xc0,
	0x1e, 0x90, 0x15, 0xfb, 0x75, 0x18, 0x08, 0x17, 0x12, 0x66, 0xa3, 0xaa, 0x30, 0x0c, 0x6f, 0x9e,
	0xa9, 0x0e, 0xd4, 0x78, 0xd7, 0xc0, 0x74, 0xfd, 0x5f, 0x05, 0x72, 0xe7, 0x9a, 0xb1, 0x8b, 0xfd,
	0x30, 0xc9, 0xfd, 0x30, 0x9e, 0x24, 0xdf, 0x83, 0xee, 0x41, 0x1c, 0x61, 0x37, 0x8d, 0xa5, 0x17,
	0xd2, 0xac, 0x0e, 0x29, 0x97, 0x4d, 0x48, 0x53, 0x73, 0xd8, 0x24, 0x87, 0x0b, 0xe5, 0x48, 0x5d,
	0x80, 0xa4, 0x13, 0x68, 0xc4, 0x42, 0xdb, 0x02, 0x7c, 0xaf, 0x02, 0x8d, 0x7e, 0xbb, 0xa0, 0x93,
	0x78, 0x7a, 0x07, 0xdc, 0x38, 0x08, 0x45, 0x07, 0xea, 0x51, 0x10, 0xbb, 0x51, 0x05, 0x1a, 0x42,
	0x0a, 0x3c, 0x08, 0x9d, 0xc2, 0xe2, 0xb1, 0xc2, 0x49, 0x1b, 0xd7, 0x4a, 0xe8, 0x34, 0x96, 0x44,
	0xa2, 0x96, 0xfb, 0xfe, 0xd1, 0x79, 0xa0, 0xe2, 0xe6, 0x39, 0xbd, 0xc1, 0x0a, 0x24, 0xff, 0x1b,
	0x25, 0x92, 0x3e, 0x48, 0x67, 0x70, 0x64, 0xec, 0x43, 0x93, 0x47, 0xda, 0x00, 0x77, 0x2f, 0x30,
	0x9f, 0x5f, 0x89, 0xe8, 0x5c, 0xc8, 0xb2, 0xaf, 0xdc, 0x0b, 0x3a, 0x8b, 0xf5, 0x70, 0x2c, 0xcf,
	0x4c, 0xf5, 0x79, 0x9a, 0x87, 0x12, 0x14, 0xb3, 0xfa, 0x6b, 0x5c, 0xc8, 0xed, 0x58, 0xda, 0x62,
	0x48, 0xae, 0x41, 0x1e, 0x23, 0x51, 0x89, 0xdb, 0x3e, 0x46, 0x0d, 0xaa, 0x3e, 0xb4, 0x40, 0x46,
	0x74, 0x8e, 0xdd, 0x21, 0xb7, 0x12, 0x39, 0x5d, 0x14, 0x3b, 0x5c, 0x7a, 0x3e, 0xd0, 0x79, 0x04,
	0x8e, 0xa5, 0x68, 0xb5, 0x0d, 0x27, 0x78, 0x16, 0x58, 0x30, 0x9e, 0xb8, 0x4a, 0x86, 0x22, 0x8c,
	0x40, 0x46, 0xda, 0xc1, 0x90, 0x16, 0x18, 0x25, 0x73, 0xc7, 0x32, 0x0e, 0xc1, 0xb3, 0x14, 0x8a,
	0x94, 0x3d, 0xa5, 0x2e, 0xe2, 0x36, 0x7a, 0x07, 0x1e, 0xbd, 0x89, 0xb2, 0x27, 0x22, 0x14, 0x67,
	0xc2, 0x17, 0x51, 0xaf, 0x26, 0xc2, 0x16, 0x8f, 0xdc, 0x73, 0xca, 0x30, 0x1f, 0x7a, 0xb0, 0x42,
	0xa8, 0xfc, 0x38, 0x35, 0x17, 0xe8, 0x2d, 0x54, 0x82, 0x50, 0x9f, 0x79, 0x31, 0x35, 0xf8, 0x2a,
	0xfd, 0xcd, 0x89, 0xde, 0x46, 0xf2, 0xa1, 0x6a, 0x0f, 0x0d, 0xd8, 0x25, 0x74, 0x5b, 0x93, 0x4d,
	0x3a, 0x0c, 0xf5, 0x0e, 0x7b, 0x48, 0xee, 0x5d, 0x4d, 0xcd, 0xb4, 0x7e, 0xc3, 0xb0, 0x8c, 0xee,
	0x97, 0x83, 0x51, 0x60, 0x05, 0x1b, 0x90, 0x99, 0x68, 0xa3, 0xe0, 0x5d, 0x9c, 0xe6, 0xf5, 0x68,
	0x4f, 0xb9, 0xa3, 0xd8, 0x3d, 0x2c, 0x1d, 0x8d, 0x1d, 0xcb, 0x90, 0x37, 0xe0, 0x48, 0x55, 0x20,
	0x8c, 0x02, 0x65, 0x5a, 0x29, 0xbd, 0x8f, 0x7a, 0x1d, 0x88, 0xc6, 0x82, 0x0f, 0xb0, 0xae, 0x1c,
	0x18, 0x63, 0xb1, 0x88, 0x7d, 0x60, 0x3b, 0x00, 0x78, 0x3d, 0xde, 0x8f, 0x87, 0xec, 0x43, 0xf2,
	0xa8, 0x8f, 0xeb, 0x36, 0x13, 0xd6, 0xe2, 0x88, 0x9f, 0xf9, 0x60, 0xf6, 0x02, 0xc3, 0xb6, 0x8a,
	0xe5, 0x63, 0x08, 0x3a, 0x79, 0xa3, 0x8a, 0x1e, 0xe1, 0xbd, 0x48, 0x71, 0x94, 0xb9, 0x49, 0xb3,
	0x41, 0x4b, 0xec, 0x23, 0xf2, 0x38, 0x85, 0x5e, 0x6b, 0xe8, 0x31, 0xba, 0xb9, 0xa5, 0xda, 0x3d,
	0x1d, 0x07, 0xde, 0xe1, 0xc2, 0x47, 0x16, 0x03, 0x7e, 0x80, 0x6e, 0x5a, 0x70, 0x30, 0x5f, 0x1f,
	0xa2, 0x75, 0x8b, 0x18, 0xdd, 0x69, 0xa5, 0x4f, 0x50, 0x29, 0x2e, 0x51, 0xe3, 0x94, 0x7e, 0x84,
	0xa2, 0x16, 0x1c, 0x15, 0x5d, 0x43, 0x51, 0x43, 0xd0, 0x46, 0x07, 0x6a, 0xe7, 0x07, 0x98, 0xb2,
	0x3e, 0x38, 0xa2, 0x79, 0x1d, 0x63, 0xdf, 0x87, 0x47, 0x75, 0xff, 0x10, 0xab, 0x7a, 0x0b, 0x2f,
	0xfb, 0x48, 0x34, 0x7f, 0x84, 0x69, 0x41, 0x28, 0x59, 0xce, 0x6c, 0xa8, 0x86, 0x0e, 0xf0, 0x63,
	0xd4, 0x70, 0xc8, 0xdd, 0x8b, 0x51, 0x0d, 0x4f, 0xcd, 0x20, 0x6c, 0x8f, 0x05, 0x7f, 0x82, 0x3e,
	0x3b, 0xc0, 0xbd, 0xb1, 0x35, 0xf1, 0xb1, 0xa9, 0x26, 0x8d, 0x0e, 0x86, 0xf9, 0x13, 0xf6, 0x98,
	0x3c, 0xb4, 0xc8, 0xb5, 0x29, 0xdc, 0xc0, 0xa8, 0xe8, 0x41, 0x34, 0x56, 0xfb, 0xa7, 0x78, 0xe6,
	0x04, 0x1e, 0x54, 0xff, 0x2c, 0x2d, 0x39, 0x1a, 0xaf, 0x9f, 0xa2, 0xf5, 0x04, 0xde, 0x57, 0xe3,
	0x43, 0xf2, 0x1c, 0x83, 0xbe, 0x2b, 0x23, 0x68, 0x42, 0x70, 0xd0, 0x1e, 0x35, 0xff, 0x33, 0x93,
	0x14, 0xe5, 0x03, 0x97, 0xe3, 0xf0, 0x9f, 0xe3, 0xcd, 0xaf, 0x7e, 0x1d, 0x73, 0x6c, 0x40, 0xe3,
	0x18, 0x7e, 0x81, 0xa7, 0x30, 0x87, 0x4b, 0x4e, 0x3f, 0xca, 0xf4, 0x4b, 0xf6, 0x88, 0x3c, 0x30,
	0x67, 0x37, 0xbb, 0xf6, 0x28, 0xcb, 0x67, 0x68, 0x28, 0xcd, 0xb2, 0xaf, 0x06, 0xa3, 0xf1, 0x39,
	0x46, 0x03, 0x0b, 0x73, 0x3b, 0x50, 0xad, 0x51, 0xf9, 0x17, 0x49, 0x51, 0x23, 0x3c, 0x2c, 0xfb,
	0x05, 0xda, 0x47, 0xf0, 0x48, 0xe1, 0x3e, 0x01, 0x63, 0x1a, 0xd5, 0xaf, 0xd0, 0x7e, 0x9a, 0x65,
	0x58, 0xc7, 0xaf, 0x59, 0x89, 0x14, 0xb7, 0x02, 0xe0, 0x11, 0xd8, 0x65, 0x64, 0x54, 0xc9, 0x26,
	0x06, 0xc3, 0xcc, 0x85, 0x4d, 0xcf, 0x0b, 0x20, 0x0c, 0xed, 0xc2, 0x52, 0x43, 0x1e, 0xa3, 0x97,
	0x96, 0x71, 0x20, 0xed, 0xab, 0xf4, 0xf8, 0x08, 0xe9, 0xd6, 0xfa, 0xb7, 0x59, 0xb2, 0x72, 0xed,
	0xf6, 0x89, 0xb6, 0xed, 0x28, 0xbf, 0x86, 0xc3, 0x0c, 0xf4, 0xd4, 0xd4, 0xd6, 0xb3, 0xdd, 0x0c,
	0xf4, 0x14, 0x55, 0xcf, 0x76, 0x9a, 0xc3, 0x23, 0x54, 0x5b, 0xed, 0xa8, 0x77, 0xc2, 0xfd, 0xd8,
	0xcc, 0x4d, 0x3a, 0x81, 0x8b, 0x9f, 0x26, 0xe2, 0x4d, 0x33, 0xb4, 0x49, 0x7c, 0x39, 0x1f, 0x6e,
	0xf5, 0x1f, 0x91, 0x53, 0x38, 0x7f, 0xf7, 0x84, 0xbc, 0x80, 0xc0, 0x58, 0x9d, 0xc6, 0xc6, 0xbf,
	0xa7, 0x5c, 0xfd, 0xe6, 0x4a, 0x17, 0xde, 0x0d, 0x1c, 0x44, 0x75, 0xf3, 0x7f, 0x17, 0x43, 0x99,
	0x59, 0xff, 0x7f, 0x96, 0xe4, 0x53, 0xfb, 0x30, 0x4e, 0x37, 0xeb, 0x54, 0x8a, 0x6a, 0x5e, 0xb1,
	0x35, 0xee, 0x37, 0x54, 0xd0, 0x02, 0xcf, 0xbc, 0x62, 0xcb, 0xdc, 0xab, 0xf1, 0xa6, 0x70, 0xcd,
	0x2b, 0xf6, 0x6a, 0xa9, 0xc1, 0xb7, 0x2c, 0x9d, 0x40, 0x1f, 0x2d, 0xed, 0x08, 0xef, 0x00, 0x26,
	0x86, 0x4e, 0xe2, 0xb5, 0x4d, 0x56, 0xba, 0xfe, 0xd2, 0x82, 0xc8, 0x14, 0x5e, 0xb9, 0x04, 0xb1,
	0xdb, 0x38, 0xe8, 0x1e, 0x4e, 0xa7, 0x53, 0x4b, 0xdf, 0x41, 0x1b, 0x5f, 0xbe, 0xf4, 0x06, 0x5a,
	0x2c, 0x73, 0x6f, 0x07, 0x38, 0x16, 0x0e, 0xea, 0xa7, 0x33, 0xa6, 0x9b, 0x40, 0xb7, 0xad, 0x77,
	0xcf, 0x41, 0xf5, 0xb3, 0xfa, 0xa1, 0x9d, 0x6c, 0x0e, 0x46, 0x80, 0xac, 0xff, 0x69, 0x82, 0xcc,
	0x0f, 0xbc, 0x0d, 0x53, 0xc7, 0x1b, 0xa0, 0xd3, 0x0c, 0x3a, 0x6c, 0x96, 0xff, 0xc4, 0x7d, 0x9d,
	0xc0, 0x97, 0x3c, 0x34, 0x8b, 0x78, 0x52, 0x97, 0x03, 0xcb, 0xb0, 0x7e, 0xc8, 0x26, 0x88, 0x7d,
	0xca, 0x9a, 0x6b, 0x69, 0x22, 0x51, 0xed, 0x08, 0x3c, 0xaa, 0x2d, 0xdd, 0x4d, 0xd7, 0x85, 0x30,
	0xa4, 0x53, 0x58, 0xf4, 0x09, 0xc9, 0x14, 0xec, 0xa0, 0xe8, 0x34, 0xe6, 0x02, 0xbd, 0x4a, 0x92,
	0x5a, 0x20, 0xf9, 0x64, 0x97, 0xe0, 0x11, 0x37, 0xcb, 0x36, 0xfe, 0xda, 0x56, 0x41, 0x8b, 0x47,
	0x86, 0x6b, 0x16, 0xb9, 0xec, 0x92, 0xa4, 0xb9, 0x08, 0x72, 0x39, 0xd0, 0x52, 0x11, 0xe0, 0xb7,
	0xe1, 0xca, 0xa3, 0xed, 0x2d, 0x2e, 0xa5, 0x8a, 0x74, 0x13, 0xd3, 0x16, 0xf5, 0xe3, 0xdc, 0xbe,
	0xe7, 0xe7, 0x30, 0xc8, 0xa6, 0x3e, 0xd3, 0x4f, 0x26, 0x23, 0x3d, 0x8f, 0xdd, 0x40, 0x83, 0x95,
	0xc1, 0x17, 0x95, 0x81, 0x17, 0xb0, 0x2c, 0xfb, 0x39, 0x30, 0x57, 0x6d, 0x9f, 0xb7, 0x80, 0x16,
	0xca, 0xcf, 0xde, 0xbc, 0x2d, 0x66, 0xbe, 0x79, 0x5b, 0xcc, 0x7c, 0xf7, 0xb6, 0x98, 0xfd, 0xe3,
	0x65, 0x31, 0xfb, 0xd7, 0xcb, 0x62, 0xf6, 0xdf, 0x97, 0xc5, 0xec, 0x9b, 0xcb, 0x62, 0xf6, 0xdb,
	0xcb, 0x62, 0xf6, 0x3f, 0x97, 0xc5, 0xcc, 0x77, 0x97, 0xc5, 0xec, 0x9f, 0xdf, 0x15, 0x33, 0x6f,
	0xde, 0x15, 0x33, 0xdf, 0xbc, 0x2b, 0x66, 0xce, 0xa6, 0xf5, 0xbf, 0x0e, 0x3f, 0xfd, 0x3e, 0x00,
	0x00, 0xff, 0xff, 0xab, 0x5b, 0x18, 0xf7, 0x6c, 0x14, 0x00, 0x00,
}

func (x VMValidationStatusCode) String() string {
	s, ok := VMValidationStatusCode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x VMVerificationErrorKind) String() string {
	s, ok := VMVerificationErrorKind_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x VMInvariantViolationError) String() string {
	s, ok := VMInvariantViolationError_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x BinaryError) String() string {
	s, ok := BinaryError_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x RuntimeStatus) String() string {
	s, ok := RuntimeStatus_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x VMVerificationStatus_StatusKind) String() string {
	s, ok := VMVerificationStatus_StatusKind_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ArithmeticError_ArithmeticErrorType) String() string {
	s, ok := ArithmeticError_ArithmeticErrorType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x DynamicReferenceError_DynamicReferenceErrorType) String() string {
	s, ok := DynamicReferenceError_DynamicReferenceErrorType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *VMValidationStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VMValidationStatus)
	if !ok {
		that2, ok := that.(VMValidationStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	return true
}
func (this *VMVerificationStatusList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VMVerificationStatusList)
	if !ok {
		that2, ok := that.(VMVerificationStatusList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.StatusList) != len(that1.StatusList) {
		return false
	}
	for i := range this.StatusList {
		if !this.StatusList[i].Equal(that1.StatusList[i]) {
			return false
		}
	}
	return true
}
func (this *VMVerificationStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VMVerificationStatus)
	if !ok {
		that2, ok := that.(VMVerificationStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StatusKind != that1.StatusKind {
		return false
	}
	if this.ModuleIdx != that1.ModuleIdx {
		return false
	}
	if this.ErrorKind != that1.ErrorKind {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	if !this.DependencyId.Equal(that1.DependencyId) {
		return false
	}
	return true
}
func (this *AssertionFailure) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AssertionFailure)
	if !ok {
		that2, ok := that.(AssertionFailure)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AssertionErrorCode != that1.AssertionErrorCode {
		return false
	}
	return true
}
func (this *ArithmeticError) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ArithmeticError)
	if !ok {
		that2, ok := that.(ArithmeticError)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ErrorCode != that1.ErrorCode {
		return false
	}
	return true
}
func (this *DynamicReferenceError) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DynamicReferenceError)
	if !ok {
		that2, ok := that.(DynamicReferenceError)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ErrorCode != that1.ErrorCode {
		return false
	}
	return true
}
func (this *ExecutionStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExecutionStatus)
	if !ok {
		that2, ok := that.(ExecutionStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ExecutionStatus == nil {
		if this.ExecutionStatus != nil {
			return false
		}
	} else if this.ExecutionStatus == nil {
		return false
	} else if !this.ExecutionStatus.Equal(that1.ExecutionStatus) {
		return false
	}
	return true
}
func (this *ExecutionStatus_RuntimeStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExecutionStatus_RuntimeStatus)
	if !ok {
		that2, ok := that.(ExecutionStatus_RuntimeStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RuntimeStatus != that1.RuntimeStatus {
		return false
	}
	return true
}
func (this *ExecutionStatus_AssertionFailure) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExecutionStatus_AssertionFailure)
	if !ok {
		that2, ok := that.(ExecutionStatus_AssertionFailure)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AssertionFailure.Equal(that1.AssertionFailure) {
		return false
	}
	return true
}
func (this *ExecutionStatus_ArithmeticError) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExecutionStatus_ArithmeticError)
	if !ok {
		that2, ok := that.(ExecutionStatus_ArithmeticError)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ArithmeticError.Equal(that1.ArithmeticError) {
		return false
	}
	return true
}
func (this *ExecutionStatus_ReferenceError) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExecutionStatus_ReferenceError)
	if !ok {
		that2, ok := that.(ExecutionStatus_ReferenceError)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ReferenceError.Equal(that1.ReferenceError) {
		return false
	}
	return true
}
func (this *VMStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VMStatus)
	if !ok {
		that2, ok := that.(VMStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ErrorType == nil {
		if this.ErrorType != nil {
			return false
		}
	} else if this.ErrorType == nil {
		return false
	} else if !this.ErrorType.Equal(that1.ErrorType) {
		return false
	}
	return true
}
func (this *VMStatus_Validation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VMStatus_Validation)
	if !ok {
		that2, ok := that.(VMStatus_Validation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Validation.Equal(that1.Validation) {
		return false
	}
	return true
}
func (this *VMStatus_Verification) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VMStatus_Verification)
	if !ok {
		that2, ok := that.(VMStatus_Verification)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Verification.Equal(that1.Verification) {
		return false
	}
	return true
}
func (this *VMStatus_InvariantViolation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VMStatus_InvariantViolation)
	if !ok {
		that2, ok := that.(VMStatus_InvariantViolation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.InvariantViolation != that1.InvariantViolation {
		return false
	}
	return true
}
func (this *VMStatus_Deserialization) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VMStatus_Deserialization)
	if !ok {
		that2, ok := that.(VMStatus_Deserialization)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Deserialization != that1.Deserialization {
		return false
	}
	return true
}
func (this *VMStatus_Execution) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VMStatus_Execution)
	if !ok {
		that2, ok := that.(VMStatus_Execution)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Execution.Equal(that1.Execution) {
		return false
	}
	return true
}
func (this *VMValidationStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&types.VMValidationStatus{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VMVerificationStatusList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&types.VMVerificationStatusList{")
	if this.StatusList != nil {
		s = append(s, "StatusList: "+fmt.Sprintf("%#v", this.StatusList)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VMVerificationStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&types.VMVerificationStatus{")
	s = append(s, "StatusKind: "+fmt.Sprintf("%#v", this.StatusKind)+",\n")
	s = append(s, "ModuleIdx: "+fmt.Sprintf("%#v", this.ModuleIdx)+",\n")
	s = append(s, "ErrorKind: "+fmt.Sprintf("%#v", this.ErrorKind)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	if this.DependencyId != nil {
		s = append(s, "DependencyId: "+fmt.Sprintf("%#v", this.DependencyId)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AssertionFailure) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&types.AssertionFailure{")
	s = append(s, "AssertionErrorCode: "+fmt.Sprintf("%#v", this.AssertionErrorCode)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ArithmeticError) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&types.ArithmeticError{")
	s = append(s, "ErrorCode: "+fmt.Sprintf("%#v", this.ErrorCode)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DynamicReferenceError) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&types.DynamicReferenceError{")
	s = append(s, "ErrorCode: "+fmt.Sprintf("%#v", this.ErrorCode)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ExecutionStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&types.ExecutionStatus{")
	if this.ExecutionStatus != nil {
		s = append(s, "ExecutionStatus: "+fmt.Sprintf("%#v", this.ExecutionStatus)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ExecutionStatus_RuntimeStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&types.ExecutionStatus_RuntimeStatus{` +
		`RuntimeStatus:` + fmt.Sprintf("%#v", this.RuntimeStatus) + `}`}, ", ")
	return s
}
func (this *ExecutionStatus_AssertionFailure) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&types.ExecutionStatus_AssertionFailure{` +
		`AssertionFailure:` + fmt.Sprintf("%#v", this.AssertionFailure) + `}`}, ", ")
	return s
}
func (this *ExecutionStatus_ArithmeticError) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&types.ExecutionStatus_ArithmeticError{` +
		`ArithmeticError:` + fmt.Sprintf("%#v", this.ArithmeticError) + `}`}, ", ")
	return s
}
func (this *ExecutionStatus_ReferenceError) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&types.ExecutionStatus_ReferenceError{` +
		`ReferenceError:` + fmt.Sprintf("%#v", this.ReferenceError) + `}`}, ", ")
	return s
}
func (this *VMStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&types.VMStatus{")
	if this.ErrorType != nil {
		s = append(s, "ErrorType: "+fmt.Sprintf("%#v", this.ErrorType)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VMStatus_Validation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&types.VMStatus_Validation{` +
		`Validation:` + fmt.Sprintf("%#v", this.Validation) + `}`}, ", ")
	return s
}
func (this *VMStatus_Verification) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&types.VMStatus_Verification{` +
		`Verification:` + fmt.Sprintf("%#v", this.Verification) + `}`}, ", ")
	return s
}
func (this *VMStatus_InvariantViolation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&types.VMStatus_InvariantViolation{` +
		`InvariantViolation:` + fmt.Sprintf("%#v", this.InvariantViolation) + `}`}, ", ")
	return s
}
func (this *VMStatus_Deserialization) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&types.VMStatus_Deserialization{` +
		`Deserialization:` + fmt.Sprintf("%#v", this.Deserialization) + `}`}, ", ")
	return s
}
func (this *VMStatus_Execution) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&types.VMStatus_Execution{` +
		`Execution:` + fmt.Sprintf("%#v", this.Execution) + `}`}, ", ")
	return s
}
func valueToGoStringVmErrors(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *VMValidationStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VMValidationStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVmErrors(dAtA, i, uint64(m.Code))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintVmErrors(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	return i, nil
}

func (m *VMVerificationStatusList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VMVerificationStatusList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.StatusList) > 0 {
		for _, msg := range m.StatusList {
			dAtA[i] = 0xa
			i++
			i = encodeVarintVmErrors(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *VMVerificationStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VMVerificationStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StatusKind != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVmErrors(dAtA, i, uint64(m.StatusKind))
	}
	if m.ModuleIdx != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVmErrors(dAtA, i, uint64(m.ModuleIdx))
	}
	if m.ErrorKind != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVmErrors(dAtA, i, uint64(m.ErrorKind))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintVmErrors(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.DependencyId != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintVmErrors(dAtA, i, uint64(m.DependencyId.Size()))
		n1, err1 := m.DependencyId.MarshalTo(dAtA[i:])
		if err1 != nil {
			return 0, err1
		}
		i += n1
	}
	return i, nil
}

func (m *AssertionFailure) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssertionFailure) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AssertionErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVmErrors(dAtA, i, uint64(m.AssertionErrorCode))
	}
	return i, nil
}

func (m *ArithmeticError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArithmeticError) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVmErrors(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *DynamicReferenceError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DynamicReferenceError) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVmErrors(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func (m *ExecutionStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecutionStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ExecutionStatus != nil {
		nn2, err2 := m.ExecutionStatus.MarshalTo(dAtA[i:])
		if err2 != nil {
			return 0, err2
		}
		i += nn2
	}
	return i, nil
}

func (m *ExecutionStatus_RuntimeStatus) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x8
	i++
	i = encodeVarintVmErrors(dAtA, i, uint64(m.RuntimeStatus))
	return i, nil
}
func (m *ExecutionStatus_AssertionFailure) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AssertionFailure != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintVmErrors(dAtA, i, uint64(m.AssertionFailure.Size()))
		n3, err3 := m.AssertionFailure.MarshalTo(dAtA[i:])
		if err3 != nil {
			return 0, err3
		}
		i += n3
	}
	return i, nil
}
func (m *ExecutionStatus_ArithmeticError) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ArithmeticError != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintVmErrors(dAtA, i, uint64(m.ArithmeticError.Size()))
		n4, err4 := m.ArithmeticError.MarshalTo(dAtA[i:])
		if err4 != nil {
			return 0, err4
		}
		i += n4
	}
	return i, nil
}
func (m *ExecutionStatus_ReferenceError) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ReferenceError != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintVmErrors(dAtA, i, uint64(m.ReferenceError.Size()))
		n5, err5 := m.ReferenceError.MarshalTo(dAtA[i:])
		if err5 != nil {
			return 0, err5
		}
		i += n5
	}
	return i, nil
}
func (m *VMStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VMStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ErrorType != nil {
		nn6, err6 := m.ErrorType.MarshalTo(dAtA[i:])
		if err6 != nil {
			return 0, err6
		}
		i += nn6
	}
	return i, nil
}

func (m *VMStatus_Validation) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Validation != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintVmErrors(dAtA, i, uint64(m.Validation.Size()))
		n7, err7 := m.Validation.MarshalTo(dAtA[i:])
		if err7 != nil {
			return 0, err7
		}
		i += n7
	}
	return i, nil
}
func (m *VMStatus_Verification) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Verification != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintVmErrors(dAtA, i, uint64(m.Verification.Size()))
		n8, err8 := m.Verification.MarshalTo(dAtA[i:])
		if err8 != nil {
			return 0, err8
		}
		i += n8
	}
	return i, nil
}
func (m *VMStatus_InvariantViolation) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x18
	i++
	i = encodeVarintVmErrors(dAtA, i, uint64(m.InvariantViolation))
	return i, nil
}
func (m *VMStatus_Deserialization) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x20
	i++
	i = encodeVarintVmErrors(dAtA, i, uint64(m.Deserialization))
	return i, nil
}
func (m *VMStatus_Execution) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Execution != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintVmErrors(dAtA, i, uint64(m.Execution.Size()))
		n9, err9 := m.Execution.MarshalTo(dAtA[i:])
		if err9 != nil {
			return 0, err9
		}
		i += n9
	}
	return i, nil
}
func encodeVarintVmErrors(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *VMValidationStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovVmErrors(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovVmErrors(uint64(l))
	}
	return n
}

func (m *VMVerificationStatusList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.StatusList) > 0 {
		for _, e := range m.StatusList {
			l = e.Size()
			n += 1 + l + sovVmErrors(uint64(l))
		}
	}
	return n
}

func (m *VMVerificationStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StatusKind != 0 {
		n += 1 + sovVmErrors(uint64(m.StatusKind))
	}
	if m.ModuleIdx != 0 {
		n += 1 + sovVmErrors(uint64(m.ModuleIdx))
	}
	if m.ErrorKind != 0 {
		n += 1 + sovVmErrors(uint64(m.ErrorKind))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovVmErrors(uint64(l))
	}
	if m.DependencyId != nil {
		l = m.DependencyId.Size()
		n += 1 + l + sovVmErrors(uint64(l))
	}
	return n
}

func (m *AssertionFailure) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AssertionErrorCode != 0 {
		n += 1 + sovVmErrors(uint64(m.AssertionErrorCode))
	}
	return n
}

func (m *ArithmeticError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovVmErrors(uint64(m.ErrorCode))
	}
	return n
}

func (m *DynamicReferenceError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ErrorCode != 0 {
		n += 1 + sovVmErrors(uint64(m.ErrorCode))
	}
	return n
}

func (m *ExecutionStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExecutionStatus != nil {
		n += m.ExecutionStatus.Size()
	}
	return n
}

func (m *ExecutionStatus_RuntimeStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovVmErrors(uint64(m.RuntimeStatus))
	return n
}
func (m *ExecutionStatus_AssertionFailure) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AssertionFailure != nil {
		l = m.AssertionFailure.Size()
		n += 1 + l + sovVmErrors(uint64(l))
	}
	return n
}
func (m *ExecutionStatus_ArithmeticError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ArithmeticError != nil {
		l = m.ArithmeticError.Size()
		n += 1 + l + sovVmErrors(uint64(l))
	}
	return n
}
func (m *ExecutionStatus_ReferenceError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReferenceError != nil {
		l = m.ReferenceError.Size()
		n += 1 + l + sovVmErrors(uint64(l))
	}
	return n
}
func (m *VMStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ErrorType != nil {
		n += m.ErrorType.Size()
	}
	return n
}

func (m *VMStatus_Validation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Validation != nil {
		l = m.Validation.Size()
		n += 1 + l + sovVmErrors(uint64(l))
	}
	return n
}
func (m *VMStatus_Verification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Verification != nil {
		l = m.Verification.Size()
		n += 1 + l + sovVmErrors(uint64(l))
	}
	return n
}
func (m *VMStatus_InvariantViolation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovVmErrors(uint64(m.InvariantViolation))
	return n
}
func (m *VMStatus_Deserialization) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovVmErrors(uint64(m.Deserialization))
	return n
}
func (m *VMStatus_Execution) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Execution != nil {
		l = m.Execution.Size()
		n += 1 + l + sovVmErrors(uint64(l))
	}
	return n
}

func sovVmErrors(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVmErrors(x uint64) (n int) {
	return sovVmErrors(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *VMValidationStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VMValidationStatus{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VMVerificationStatusList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForStatusList := "[]*VMVerificationStatus{"
	for _, f := range this.StatusList {
		repeatedStringForStatusList += strings.Replace(f.String(), "VMVerificationStatus", "VMVerificationStatus", 1) + ","
	}
	repeatedStringForStatusList += "}"
	s := strings.Join([]string{`&VMVerificationStatusList{`,
		`StatusList:` + repeatedStringForStatusList + `,`,
		`}`,
	}, "")
	return s
}
func (this *VMVerificationStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VMVerificationStatus{`,
		`StatusKind:` + fmt.Sprintf("%v", this.StatusKind) + `,`,
		`ModuleIdx:` + fmt.Sprintf("%v", this.ModuleIdx) + `,`,
		`ErrorKind:` + fmt.Sprintf("%v", this.ErrorKind) + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`DependencyId:` + strings.Replace(fmt.Sprintf("%v", this.DependencyId), "ModuleId", "ModuleId", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AssertionFailure) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AssertionFailure{`,
		`AssertionErrorCode:` + fmt.Sprintf("%v", this.AssertionErrorCode) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ArithmeticError) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ArithmeticError{`,
		`ErrorCode:` + fmt.Sprintf("%v", this.ErrorCode) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DynamicReferenceError) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DynamicReferenceError{`,
		`ErrorCode:` + fmt.Sprintf("%v", this.ErrorCode) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExecutionStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExecutionStatus{`,
		`ExecutionStatus:` + fmt.Sprintf("%v", this.ExecutionStatus) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExecutionStatus_RuntimeStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExecutionStatus_RuntimeStatus{`,
		`RuntimeStatus:` + fmt.Sprintf("%v", this.RuntimeStatus) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExecutionStatus_AssertionFailure) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExecutionStatus_AssertionFailure{`,
		`AssertionFailure:` + strings.Replace(fmt.Sprintf("%v", this.AssertionFailure), "AssertionFailure", "AssertionFailure", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExecutionStatus_ArithmeticError) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExecutionStatus_ArithmeticError{`,
		`ArithmeticError:` + strings.Replace(fmt.Sprintf("%v", this.ArithmeticError), "ArithmeticError", "ArithmeticError", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExecutionStatus_ReferenceError) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExecutionStatus_ReferenceError{`,
		`ReferenceError:` + strings.Replace(fmt.Sprintf("%v", this.ReferenceError), "DynamicReferenceError", "DynamicReferenceError", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VMStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VMStatus{`,
		`ErrorType:` + fmt.Sprintf("%v", this.ErrorType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VMStatus_Validation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VMStatus_Validation{`,
		`Validation:` + strings.Replace(fmt.Sprintf("%v", this.Validation), "VMValidationStatus", "VMValidationStatus", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VMStatus_Verification) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VMStatus_Verification{`,
		`Verification:` + strings.Replace(fmt.Sprintf("%v", this.Verification), "VMVerificationStatusList", "VMVerificationStatusList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VMStatus_InvariantViolation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VMStatus_InvariantViolation{`,
		`InvariantViolation:` + fmt.Sprintf("%v", this.InvariantViolation) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VMStatus_Deserialization) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VMStatus_Deserialization{`,
		`Deserialization:` + fmt.Sprintf("%v", this.Deserialization) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VMStatus_Execution) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VMStatus_Execution{`,
		`Execution:` + strings.Replace(fmt.Sprintf("%v", this.Execution), "ExecutionStatus", "ExecutionStatus", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringVmErrors(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *VMValidationStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVmErrors
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VMValidationStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VMValidationStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmErrors
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= VMValidationStatusCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmErrors
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVmErrors
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVmErrors
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVmErrors(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVmErrors
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVmErrors
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VMVerificationStatusList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVmErrors
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VMVerificationStatusList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VMVerificationStatusList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmErrors
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVmErrors
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVmErrors
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatusList = append(m.StatusList, &VMVerificationStatus{})
			if err := m.StatusList[len(m.StatusList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVmErrors(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVmErrors
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVmErrors
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VMVerificationStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVmErrors
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VMVerificationStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VMVerificationStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusKind", wireType)
			}
			m.StatusKind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmErrors
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatusKind |= VMVerificationStatus_StatusKind(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleIdx", wireType)
			}
			m.ModuleIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmErrors
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ModuleIdx |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorKind", wireType)
			}
			m.ErrorKind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmErrors
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorKind |= VMVerificationErrorKind(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmErrors
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVmErrors
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVmErrors
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DependencyId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmErrors
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVmErrors
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVmErrors
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DependencyId == nil {
				m.DependencyId = &ModuleId{}
			}
			if err := m.DependencyId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVmErrors(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVmErrors
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVmErrors
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssertionFailure) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVmErrors
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssertionFailure: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssertionFailure: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssertionErrorCode", wireType)
			}
			m.AssertionErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmErrors
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssertionErrorCode |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVmErrors(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVmErrors
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVmErrors
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArithmeticError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVmErrors
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArithmeticError: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArithmeticError: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmErrors
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= ArithmeticError_ArithmeticErrorType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVmErrors(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVmErrors
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVmErrors
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DynamicReferenceError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVmErrors
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DynamicReferenceError: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DynamicReferenceError: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmErrors
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= DynamicReferenceError_DynamicReferenceErrorType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVmErrors(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVmErrors
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVmErrors
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecutionStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVmErrors
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecutionStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecutionStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuntimeStatus", wireType)
			}
			var v RuntimeStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmErrors
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= RuntimeStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExecutionStatus = &ExecutionStatus_RuntimeStatus{v}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssertionFailure", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmErrors
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVmErrors
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVmErrors
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AssertionFailure{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ExecutionStatus = &ExecutionStatus_AssertionFailure{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArithmeticError", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmErrors
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVmErrors
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVmErrors
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ArithmeticError{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ExecutionStatus = &ExecutionStatus_ArithmeticError{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferenceError", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmErrors
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVmErrors
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVmErrors
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DynamicReferenceError{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ExecutionStatus = &ExecutionStatus_ReferenceError{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVmErrors(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVmErrors
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVmErrors
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VMStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVmErrors
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VMStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VMStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmErrors
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVmErrors
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVmErrors
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &VMValidationStatus{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ErrorType = &VMStatus_Validation{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmErrors
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVmErrors
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVmErrors
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &VMVerificationStatusList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ErrorType = &VMStatus_Verification{v}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvariantViolation", wireType)
			}
			var v VMInvariantViolationError
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmErrors
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= VMInvariantViolationError(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ErrorType = &VMStatus_InvariantViolation{v}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deserialization", wireType)
			}
			var v BinaryError
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmErrors
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= BinaryError(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ErrorType = &VMStatus_Deserialization{v}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Execution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVmErrors
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVmErrors
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVmErrors
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ExecutionStatus{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ErrorType = &VMStatus_Execution{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVmErrors(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVmErrors
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVmErrors
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVmErrors(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVmErrors
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVmErrors
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVmErrors
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVmErrors
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthVmErrors
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowVmErrors
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipVmErrors(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthVmErrors
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthVmErrors = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVmErrors   = fmt.Errorf("proto: integer overflow")
)
