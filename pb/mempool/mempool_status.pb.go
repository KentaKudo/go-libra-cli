// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mempool_status.proto

package mempool

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type MempoolAddTransactionStatusCode int32

const (
	// Transaction was sent to Mempool
	Valid MempoolAddTransactionStatusCode = 0
	// The sender does not have enough balance for the transaction.
	InsufficientBalance MempoolAddTransactionStatusCode = 1
	// Sequence number is old, etc.
	InvalidSeqNumber MempoolAddTransactionStatusCode = 2
	// Mempool is full (reached max global capacity)
	MempoolIsFull MempoolAddTransactionStatusCode = 3
	// Account reached max capacity per account
	TooManyTransactions MempoolAddTransactionStatusCode = 4
	// Invalid update. Only gas price increase is allowed
	InvalidUpdate MempoolAddTransactionStatusCode = 5
)

var MempoolAddTransactionStatusCode_name = map[int32]string{
	0: "Valid",
	1: "InsufficientBalance",
	2: "InvalidSeqNumber",
	3: "MempoolIsFull",
	4: "TooManyTransactions",
	5: "InvalidUpdate",
}

var MempoolAddTransactionStatusCode_value = map[string]int32{
	"Valid":               0,
	"InsufficientBalance": 1,
	"InvalidSeqNumber":    2,
	"MempoolIsFull":       3,
	"TooManyTransactions": 4,
	"InvalidUpdate":       5,
}

func (MempoolAddTransactionStatusCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cad4a86f8a5465be, []int{0}
}

type MempoolAddTransactionStatus struct {
	Code    MempoolAddTransactionStatusCode `protobuf:"varint,1,opt,name=code,proto3,enum=mempool.MempoolAddTransactionStatusCode" json:"code,omitempty"`
	Message string                          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *MempoolAddTransactionStatus) Reset()      { *m = MempoolAddTransactionStatus{} }
func (*MempoolAddTransactionStatus) ProtoMessage() {}
func (*MempoolAddTransactionStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_cad4a86f8a5465be, []int{0}
}
func (m *MempoolAddTransactionStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MempoolAddTransactionStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MempoolAddTransactionStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MempoolAddTransactionStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MempoolAddTransactionStatus.Merge(m, src)
}
func (m *MempoolAddTransactionStatus) XXX_Size() int {
	return m.Size()
}
func (m *MempoolAddTransactionStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_MempoolAddTransactionStatus.DiscardUnknown(m)
}

var xxx_messageInfo_MempoolAddTransactionStatus proto.InternalMessageInfo

func (m *MempoolAddTransactionStatus) GetCode() MempoolAddTransactionStatusCode {
	if m != nil {
		return m.Code
	}
	return Valid
}

func (m *MempoolAddTransactionStatus) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterEnum("mempool.MempoolAddTransactionStatusCode", MempoolAddTransactionStatusCode_name, MempoolAddTransactionStatusCode_value)
	proto.RegisterType((*MempoolAddTransactionStatus)(nil), "mempool.MempoolAddTransactionStatus")
}

func init() { proto.RegisterFile("mempool_status.proto", fileDescriptor_cad4a86f8a5465be) }

var fileDescriptor_cad4a86f8a5465be = []byte{
	// 289 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xc9, 0x4d, 0xcd, 0x2d,
	0xc8, 0xcf, 0xcf, 0x89, 0x2f, 0x2e, 0x49, 0x2c, 0x29, 0x2d, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0x62, 0x87, 0x8a, 0x2a, 0x95, 0x72, 0x49, 0xfb, 0x42, 0x98, 0x8e, 0x29, 0x29, 0x21, 0x45,
	0x89, 0x79, 0xc5, 0x89, 0xc9, 0x25, 0x99, 0xf9, 0x79, 0xc1, 0x60, 0xd5, 0x42, 0x36, 0x5c, 0x2c,
	0xc9, 0xf9, 0x29, 0xa9, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x7c, 0x46, 0x1a, 0x7a, 0x50, 0x6d, 0x7a,
	0x78, 0xf4, 0x38, 0xe7, 0xa7, 0xa4, 0x06, 0x81, 0x75, 0x09, 0x49, 0x70, 0xb1, 0xe7, 0xa6, 0x16,
	0x17, 0x27, 0xa6, 0xa7, 0x4a, 0x30, 0x29, 0x30, 0x6a, 0x70, 0x06, 0xc1, 0xb8, 0x5a, 0xb3, 0x18,
	0xb9, 0xe4, 0x09, 0x98, 0x21, 0xc4, 0xc9, 0xc5, 0x1a, 0x96, 0x98, 0x93, 0x99, 0x22, 0xc0, 0x20,
	0x24, 0xce, 0x25, 0xec, 0x99, 0x57, 0x5c, 0x9a, 0x96, 0x96, 0x99, 0x9c, 0x99, 0x9a, 0x57, 0xe2,
	0x94, 0x98, 0x93, 0x98, 0x97, 0x9c, 0x2a, 0xc0, 0x28, 0x24, 0xc2, 0x25, 0xe0, 0x99, 0x57, 0x06,
	0x52, 0x15, 0x9c, 0x5a, 0xe8, 0x57, 0x9a, 0x9b, 0x94, 0x5a, 0x24, 0xc0, 0x24, 0x24, 0xc8, 0xc5,
	0x0b, 0x35, 0xdc, 0xb3, 0xd8, 0xad, 0x34, 0x27, 0x47, 0x80, 0x19, 0x64, 0x42, 0x48, 0x7e, 0xbe,
	0x6f, 0x62, 0x5e, 0x25, 0x92, 0x65, 0xc5, 0x02, 0x2c, 0x20, 0xb5, 0x50, 0x13, 0x42, 0x0b, 0x52,
	0x12, 0x4b, 0x52, 0x05, 0x58, 0x9d, 0x4c, 0x2e, 0x3c, 0x94, 0x63, 0xb8, 0xf1, 0x50, 0x8e, 0xe1,
	0xc3, 0x43, 0x39, 0xc6, 0x86, 0x47, 0x72, 0x8c, 0x2b, 0x1e, 0xc9, 0x31, 0x9e, 0x78, 0x24, 0xc7,
	0x78, 0xe1, 0x91, 0x1c, 0xe3, 0x83, 0x47, 0x72, 0x8c, 0x2f, 0x1e, 0xc9, 0x31, 0x7c, 0x78, 0x24,
	0xc7, 0x38, 0xe1, 0xb1, 0x1c, 0xc3, 0x85, 0xc7, 0x72, 0x0c, 0x37, 0x1e, 0xcb, 0x31, 0x24, 0xb1,
	0x81, 0x43, 0xd6, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xbe, 0x67, 0x78, 0x1b, 0x71, 0x01, 0x00,
	0x00,
}

func (x MempoolAddTransactionStatusCode) String() string {
	s, ok := MempoolAddTransactionStatusCode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *MempoolAddTransactionStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MempoolAddTransactionStatus)
	if !ok {
		that2, ok := that.(MempoolAddTransactionStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	return true
}
func (this *MempoolAddTransactionStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&mempool.MempoolAddTransactionStatus{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMempoolStatus(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *MempoolAddTransactionStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MempoolAddTransactionStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMempoolStatus(dAtA, i, uint64(m.Code))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMempoolStatus(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	return i, nil
}

func encodeVarintMempoolStatus(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *MempoolAddTransactionStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovMempoolStatus(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovMempoolStatus(uint64(l))
	}
	return n
}

func sovMempoolStatus(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMempoolStatus(x uint64) (n int) {
	return sovMempoolStatus(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *MempoolAddTransactionStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MempoolAddTransactionStatus{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMempoolStatus(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *MempoolAddTransactionStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMempoolStatus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MempoolAddTransactionStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MempoolAddTransactionStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMempoolStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= MempoolAddTransactionStatusCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMempoolStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMempoolStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMempoolStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMempoolStatus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMempoolStatus
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMempoolStatus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMempoolStatus(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMempoolStatus
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMempoolStatus
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMempoolStatus
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMempoolStatus
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthMempoolStatus
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMempoolStatus
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMempoolStatus(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthMempoolStatus
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMempoolStatus = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMempoolStatus   = fmt.Errorf("proto: integer overflow")
)
